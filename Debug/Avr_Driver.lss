
Avr_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00002dec  00002e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000b0  008000b0  00002ed0  2**0
                  ALLOC
  3 .stab         00002de4  00000000  00000000  00002ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018fd  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007861  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a395  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 14 	call	0x2944	; 0x2944 <main>
      8a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e9       	ldi	r26, 0x94	; 148
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e9       	ldi	r24, 0x94	; 148
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_Timer0_Init>:
uint32_t Timer0_u32_NumOfOverFlows = 0;
uint8_t  Timer0_u8_RemTicks        = 0;
uint32_t Timer0_NumOfCompareMatch  = 0;
void (*CallBack)(void);
void M_Timer0_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	#if   Timer0_Mode   ==   Normal_Mode
	ClrBit(TCCR0,3);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	8c 93       	st	X, r24
	ClrBit(TCCR0,6);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24
	SetBit(TIMSK,0);    // to enable timer0 overflow int
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	8c 93       	st	X, r24
	#elif Timer0_Mode   ==   Ctc_Mode
	SetBit(TCCR0,3);
	ClrBit(TCCR0,6);
	SetBit(TIMSK,1);    // to enable timer0 compare match int
	#endif
	SetBit(SREG,7);     // to enable global int
     b78:	af e5       	ldi	r26, 0x5F	; 95
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ef e5       	ldi	r30, 0x5F	; 95
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <M_Timer0_SetTime>:
void M_Timer0_SetTime(uint32_t Local_u8_DesiredTime)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	2c 97       	sbiw	r28, 0x0c	; 12
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	69 87       	std	Y+9, r22	; 0x09
     ba2:	7a 87       	std	Y+10, r23	; 0x0a
     ba4:	8b 87       	std	Y+11, r24	; 0x0b
     ba6:	9c 87       	std	Y+12, r25	; 0x0c
	#if   Timer0_Mode   ==   Normal_Mode
	uint32_t Local_u32_TickTime        = TIMER0_PRESCALER / F_OSC;                            // result will be in micro second
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	8d 83       	std	Y+5, r24	; 0x05
     bb2:	9e 83       	std	Y+6, r25	; 0x06
     bb4:	af 83       	std	Y+7, r26	; 0x07
     bb6:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t Local_u32_Total_Ticks     = (Local_u8_DesiredTime * 1000) / Local_u32_TickTime;
     bb8:	89 85       	ldd	r24, Y+9	; 0x09
     bba:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbc:	ab 85       	ldd	r26, Y+11	; 0x0b
     bbe:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc0:	28 ee       	ldi	r18, 0xE8	; 232
     bc2:	33 e0       	ldi	r19, 0x03	; 3
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	bc 01       	movw	r22, r24
     bca:	cd 01       	movw	r24, r26
     bcc:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__mulsi3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	2d 81       	ldd	r18, Y+5	; 0x05
     bd6:	3e 81       	ldd	r19, Y+6	; 0x06
     bd8:	4f 81       	ldd	r20, Y+7	; 0x07
     bda:	58 85       	ldd	r21, Y+8	; 0x08
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__udivmodsi4>
     be4:	da 01       	movw	r26, r20
     be6:	c9 01       	movw	r24, r18
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	ab 83       	std	Y+3, r26	; 0x03
     bee:	bc 83       	std	Y+4, r27	; 0x04
	    Timer0_u32_NumOfOverFlows = Local_u32_Total_Ticks / 256;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	ab 81       	ldd	r26, Y+3	; 0x03
     bf6:	bc 81       	ldd	r27, Y+4	; 0x04
     bf8:	89 2f       	mov	r24, r25
     bfa:	9a 2f       	mov	r25, r26
     bfc:	ab 2f       	mov	r26, r27
     bfe:	bb 27       	eor	r27, r27
     c00:	80 93 b0 00 	sts	0x00B0, r24
     c04:	90 93 b1 00 	sts	0x00B1, r25
     c08:	a0 93 b2 00 	sts	0x00B2, r26
     c0c:	b0 93 b3 00 	sts	0x00B3, r27
	    Timer0_u8_RemTicks        = Local_u32_Total_Ticks % 256;
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	80 93 b4 00 	sts	0x00B4, r24
	if(Timer0_u8_RemTicks != 0)
     c16:	80 91 b4 00 	lds	r24, 0x00B4
     c1a:	88 23       	and	r24, r24
     c1c:	c9 f0       	breq	.+50     	; 0xc50 <M_Timer0_SetTime+0xc4>
	{
		TCNT0= 256 - Timer0_u8_RemTicks;
     c1e:	e2 e5       	ldi	r30, 0x52	; 82
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 91 b4 00 	lds	r24, 0x00B4
     c26:	81 95       	neg	r24
     c28:	80 83       	st	Z, r24
		Timer0_u32_NumOfOverFlows++;
     c2a:	80 91 b0 00 	lds	r24, 0x00B0
     c2e:	90 91 b1 00 	lds	r25, 0x00B1
     c32:	a0 91 b2 00 	lds	r26, 0x00B2
     c36:	b0 91 b3 00 	lds	r27, 0x00B3
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	a1 1d       	adc	r26, r1
     c3e:	b1 1d       	adc	r27, r1
     c40:	80 93 b0 00 	sts	0x00B0, r24
     c44:	90 93 b1 00 	sts	0x00B1, r25
     c48:	a0 93 b2 00 	sts	0x00B2, r26
     c4c:	b0 93 b3 00 	sts	0x00B3, r27
		Local_u8_DevisionFactor--;
	}
	    Timer0_NumOfCompareMatch  = Local_u32_Total_Ticks / Local_u8_DevisionFactor;
	OCR0                          = Local_u8_DevisionFactor - 1 ;
	#endif
}
     c50:	2c 96       	adiw	r28, 0x0c	; 12
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <M_Timer0_Start>:
void M_Timer0_Start(void)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	#if   TIMER0_PRESCALER   ==   1024
	SetBit(TCCR0,0);
     c6a:	a3 e5       	ldi	r26, 0x53	; 83
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e3 e5       	ldi	r30, 0x53	; 83
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	81 60       	ori	r24, 0x01	; 1
     c76:	8c 93       	st	X, r24
	ClrBit(TCCR0,1);
     c78:	a3 e5       	ldi	r26, 0x53	; 83
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e3 e5       	ldi	r30, 0x53	; 83
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8d 7f       	andi	r24, 0xFD	; 253
     c84:	8c 93       	st	X, r24
	SetBit(TCCR0,2);
     c86:	a3 e5       	ldi	r26, 0x53	; 83
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e3 e5       	ldi	r30, 0x53	; 83
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	8c 93       	st	X, r24
	#elif TIMER0_PRESCALER   ==   256
	ClrBit(TCCR0,0);
	ClrBit(TCCR0,1);
	SetBit(TCCR0,2);
	#endif
}
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <M_Timer0_Stop>:

void M_Timer0_Stop(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	ClrBit(TCCR0,0);
     ca2:	a3 e5       	ldi	r26, 0x53	; 83
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e3 e5       	ldi	r30, 0x53	; 83
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	8c 93       	st	X, r24
	ClrBit(TCCR0,1);
     cb0:	a3 e5       	ldi	r26, 0x53	; 83
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e3 e5       	ldi	r30, 0x53	; 83
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	8c 93       	st	X, r24
	ClrBit(TCCR0,2);
     cbe:	a3 e5       	ldi	r26, 0x53	; 83
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e3 e5       	ldi	r30, 0x53	; 83
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	8b 7f       	andi	r24, 0xFB	; 251
     cca:	8c 93       	st	X, r24
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <M_Timer0_SetCallBack>:

void M_Timer0_SetCallBack(void (*Ptr)(void))
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <M_Timer0_SetCallBack+0x6>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
	CallBack = Ptr;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	90 93 be 00 	sts	0x00BE, r25
     ce8:	80 93 bd 00 	sts	0x00BD, r24
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <__vector_11>:

#if   Timer0_Mode   ==   Normal_Mode
ISR(TIMER0_OVF_vect)
{
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
	static uint32_t Local_u32_Counter = 0;
	Local_u32_Counter++;
     d20:	80 91 b9 00 	lds	r24, 0x00B9
     d24:	90 91 ba 00 	lds	r25, 0x00BA
     d28:	a0 91 bb 00 	lds	r26, 0x00BB
     d2c:	b0 91 bc 00 	lds	r27, 0x00BC
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	a1 1d       	adc	r26, r1
     d34:	b1 1d       	adc	r27, r1
     d36:	80 93 b9 00 	sts	0x00B9, r24
     d3a:	90 93 ba 00 	sts	0x00BA, r25
     d3e:	a0 93 bb 00 	sts	0x00BB, r26
     d42:	b0 93 bc 00 	sts	0x00BC, r27
	if( Local_u32_Counter == Timer0_u32_NumOfOverFlows)
     d46:	20 91 b9 00 	lds	r18, 0x00B9
     d4a:	30 91 ba 00 	lds	r19, 0x00BA
     d4e:	40 91 bb 00 	lds	r20, 0x00BB
     d52:	50 91 bc 00 	lds	r21, 0x00BC
     d56:	80 91 b0 00 	lds	r24, 0x00B0
     d5a:	90 91 b1 00 	lds	r25, 0x00B1
     d5e:	a0 91 b2 00 	lds	r26, 0x00B2
     d62:	b0 91 b3 00 	lds	r27, 0x00B3
     d66:	28 17       	cp	r18, r24
     d68:	39 07       	cpc	r19, r25
     d6a:	4a 07       	cpc	r20, r26
     d6c:	5b 07       	cpc	r21, r27
     d6e:	99 f4       	brne	.+38     	; 0xd96 <__vector_11+0xa0>
	{
		CallBack();
     d70:	e0 91 bd 00 	lds	r30, 0x00BD
     d74:	f0 91 be 00 	lds	r31, 0x00BE
     d78:	09 95       	icall
		Local_u32_Counter = 0;
     d7a:	10 92 b9 00 	sts	0x00B9, r1
     d7e:	10 92 ba 00 	sts	0x00BA, r1
     d82:	10 92 bb 00 	sts	0x00BB, r1
     d86:	10 92 bc 00 	sts	0x00BC, r1
		TCNT0  =   256 - Timer0_u8_RemTicks;
     d8a:	e2 e5       	ldi	r30, 0x52	; 82
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 91 b4 00 	lds	r24, 0x00B4
     d92:	81 95       	neg	r24
     d94:	80 83       	st	Z, r24
	}
}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <M_Dio_SetPinDirection>:
//#include "Reg.h"
#include "BitMath.h"
#include <avr\io.h>

void M_Dio_SetPinDirection(uint8_t Local_u8_Num,uint8_t local_u8_Mode)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	2a 97       	sbiw	r28, 0x0a	; 10
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Local_u8_Port =Local_u8_Num /10;
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9a e0       	ldi	r25, 0x0A	; 10
     dd8:	69 2f       	mov	r22, r25
     dda:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
     dde:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_Pin  =Local_u8_Num %10;
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9a e0       	ldi	r25, 0x0A	; 10
     de4:	69 2f       	mov	r22, r25
     de6:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
     dea:	89 2f       	mov	r24, r25
     dec:	89 83       	std	Y+1, r24	; 0x01
	switch(local_u8_Mode)
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3a 87       	std	Y+10, r19	; 0x0a
     df6:	29 87       	std	Y+9, r18	; 0x09
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	91 05       	cpc	r25, r1
     e00:	39 f0       	breq	.+14     	; 0xe10 <M_Dio_SetPinDirection+0x54>
     e02:	29 85       	ldd	r18, Y+9	; 0x09
     e04:	3a 85       	ldd	r19, Y+10	; 0x0a
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	31 05       	cpc	r19, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <M_Dio_SetPinDirection+0x52>
     e0c:	71 c0       	rjmp	.+226    	; 0xef0 <M_Dio_SetPinDirection+0x134>
     e0e:	e4 c0       	rjmp	.+456    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
	{
	case OUTPUT:
		switch (Local_u8_Port)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	38 87       	std	Y+8, r19	; 0x08
     e18:	2f 83       	std	Y+7, r18	; 0x07
     e1a:	8f 81       	ldd	r24, Y+7	; 0x07
     e1c:	98 85       	ldd	r25, Y+8	; 0x08
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	91 05       	cpc	r25, r1
     e22:	51 f1       	breq	.+84     	; 0xe78 <M_Dio_SetPinDirection+0xbc>
     e24:	2f 81       	ldd	r18, Y+7	; 0x07
     e26:	38 85       	ldd	r19, Y+8	; 0x08
     e28:	23 30       	cpi	r18, 0x03	; 3
     e2a:	31 05       	cpc	r19, r1
     e2c:	34 f4       	brge	.+12     	; 0xe3a <M_Dio_SetPinDirection+0x7e>
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	91 05       	cpc	r25, r1
     e36:	61 f0       	breq	.+24     	; 0xe50 <M_Dio_SetPinDirection+0x94>
     e38:	cf c0       	rjmp	.+414    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
     e3a:	2f 81       	ldd	r18, Y+7	; 0x07
     e3c:	38 85       	ldd	r19, Y+8	; 0x08
     e3e:	23 30       	cpi	r18, 0x03	; 3
     e40:	31 05       	cpc	r19, r1
     e42:	71 f1       	breq	.+92     	; 0xea0 <M_Dio_SetPinDirection+0xe4>
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	98 85       	ldd	r25, Y+8	; 0x08
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	91 05       	cpc	r25, r1
     e4c:	e9 f1       	breq	.+122    	; 0xec8 <M_Dio_SetPinDirection+0x10c>
     e4e:	c4 c0       	rjmp	.+392    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		{
		case A:SetBit(DDRA,Local_u8_Pin);  break;
     e50:	aa e3       	ldi	r26, 0x3A	; 58
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea e3       	ldi	r30, 0x3A	; 58
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <M_Dio_SetPinDirection+0xb2>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <M_Dio_SetPinDirection+0xae>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	b0 c0       	rjmp	.+352    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		case B:SetBit(DDRB,Local_u8_Pin);  break;
     e78:	a7 e3       	ldi	r26, 0x37	; 55
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e7 e3       	ldi	r30, 0x37	; 55
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <M_Dio_SetPinDirection+0xda>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <M_Dio_SetPinDirection+0xd6>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	9c c0       	rjmp	.+312    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		case C:SetBit(DDRC,Local_u8_Pin);  break;
     ea0:	a4 e3       	ldi	r26, 0x34	; 52
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e4 e3       	ldi	r30, 0x34	; 52
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <M_Dio_SetPinDirection+0x102>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <M_Dio_SetPinDirection+0xfe>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	88 c0       	rjmp	.+272    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		case D:SetBit(DDRD,Local_u8_Pin);  break;
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <M_Dio_SetPinDirection+0x12a>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <M_Dio_SetPinDirection+0x126>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	74 c0       	rjmp	.+232    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		default:                           break;
		}
		break;

	case INPUT:
		switch (Local_u8_Port)
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	3e 83       	std	Y+6, r19	; 0x06
     ef8:	2d 83       	std	Y+5, r18	; 0x05
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	91 05       	cpc	r25, r1
     f02:	61 f1       	breq	.+88     	; 0xf5c <M_Dio_SetPinDirection+0x1a0>
     f04:	2d 81       	ldd	r18, Y+5	; 0x05
     f06:	3e 81       	ldd	r19, Y+6	; 0x06
     f08:	23 30       	cpi	r18, 0x03	; 3
     f0a:	31 05       	cpc	r19, r1
     f0c:	34 f4       	brge	.+12     	; 0xf1a <M_Dio_SetPinDirection+0x15e>
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	69 f0       	breq	.+26     	; 0xf32 <M_Dio_SetPinDirection+0x176>
     f18:	5f c0       	rjmp	.+190    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
     f1a:	2d 81       	ldd	r18, Y+5	; 0x05
     f1c:	3e 81       	ldd	r19, Y+6	; 0x06
     f1e:	23 30       	cpi	r18, 0x03	; 3
     f20:	31 05       	cpc	r19, r1
     f22:	89 f1       	breq	.+98     	; 0xf86 <M_Dio_SetPinDirection+0x1ca>
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <M_Dio_SetPinDirection+0x174>
     f2e:	40 c0       	rjmp	.+128    	; 0xfb0 <M_Dio_SetPinDirection+0x1f4>
     f30:	53 c0       	rjmp	.+166    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		{
		case A:ClrBit(DDRA,Local_u8_Pin); break;
     f32:	aa e3       	ldi	r26, 0x3A	; 58
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ea e3       	ldi	r30, 0x3A	; 58
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <M_Dio_SetPinDirection+0x194>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <M_Dio_SetPinDirection+0x190>
     f54:	80 95       	com	r24
     f56:	84 23       	and	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	3e c0       	rjmp	.+124    	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		case B:ClrBit(DDRB,Local_u8_Pin); break;
     f5c:	a7 e3       	ldi	r26, 0x37	; 55
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e7 e3       	ldi	r30, 0x37	; 55
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <M_Dio_SetPinDirection+0x1be>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <M_Dio_SetPinDirection+0x1ba>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	29 c0       	rjmp	.+82     	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		case C:ClrBit(DDRC,Local_u8_Pin); break;
     f86:	a4 e3       	ldi	r26, 0x34	; 52
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e4 e3       	ldi	r30, 0x34	; 52
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <M_Dio_SetPinDirection+0x1e8>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <M_Dio_SetPinDirection+0x1e4>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <M_Dio_SetPinDirection+0x21c>
		case D:ClrBit(DDRD,Local_u8_Pin); break;
     fb0:	a1 e3       	ldi	r26, 0x31	; 49
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <M_Dio_SetPinDirection+0x212>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <M_Dio_SetPinDirection+0x20e>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
			break;

			default:                              break;

	}
}
     fd8:	2a 96       	adiw	r28, 0x0a	; 10
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <M_Dio_SetPortDirection>:

void M_Dio_SetPortDirection(uint8_t Local_u8_Num,uint8_t Local_u8_Mode)

{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <M_Dio_SetPortDirection+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <M_Dio_SetPortDirection+0x8>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Value=0;
     ffc:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u8_Mode == OUTPUT)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	19 f4       	brne	.+6      	; 0x100a <M_Dio_SetPortDirection+0x20>
	{
		Value = 0xFF;
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	01 c0       	rjmp	.+2      	; 0x100c <M_Dio_SetPortDirection+0x22>
	}
	else
	{
		Value =0x0;
    100a:	19 82       	std	Y+1, r1	; 0x01
	}
	switch(Local_u8_Num)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3d 83       	std	Y+5, r19	; 0x05
    1014:	2c 83       	std	Y+4, r18	; 0x04
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	91 05       	cpc	r25, r1
    101e:	d9 f0       	breq	.+54     	; 0x1056 <M_Dio_SetPortDirection+0x6c>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	23 30       	cpi	r18, 0x03	; 3
    1026:	31 05       	cpc	r19, r1
    1028:	34 f4       	brge	.+12     	; 0x1036 <M_Dio_SetPortDirection+0x4c>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	61 f0       	breq	.+24     	; 0x104c <M_Dio_SetPortDirection+0x62>
    1034:	1e c0       	rjmp	.+60     	; 0x1072 <M_Dio_SetPortDirection+0x88>
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	23 30       	cpi	r18, 0x03	; 3
    103c:	31 05       	cpc	r19, r1
    103e:	81 f0       	breq	.+32     	; 0x1060 <M_Dio_SetPortDirection+0x76>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	91 05       	cpc	r25, r1
    1048:	81 f0       	breq	.+32     	; 0x106a <M_Dio_SetPortDirection+0x80>
    104a:	13 c0       	rjmp	.+38     	; 0x1072 <M_Dio_SetPortDirection+0x88>
	{
	case A: DDRA=Value; break;
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 83       	st	Z, r24
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <M_Dio_SetPortDirection+0x88>
	case B: DDRB=Value; break;
    1056:	e7 e3       	ldi	r30, 0x37	; 55
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	80 83       	st	Z, r24
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <M_Dio_SetPortDirection+0x88>
	case C: DDRC=Value; break;
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	80 83       	st	Z, r24
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <M_Dio_SetPortDirection+0x88>
	case D: DDRD=Value; break;
    106a:	e1 e3       	ldi	r30, 0x31	; 49
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	80 83       	st	Z, r24
	default:            break;
	}
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <M_Dio_SetPinValue>:

void M_Dio_SetPinValue(uint8_t Local_u8_Num,uint8_t Local_u8_Level)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	2a 97       	sbiw	r28, 0x0a	; 10
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	8b 83       	std	Y+3, r24	; 0x03
    1098:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Local_u8_Pin =Local_u8_Num %10;
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9a e0       	ldi	r25, 0x0A	; 10
    109e:	69 2f       	mov	r22, r25
    10a0:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
    10a4:	89 2f       	mov	r24, r25
    10a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_Port =Local_u8_Num/10;
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9a e0       	ldi	r25, 0x0A	; 10
    10ac:	69 2f       	mov	r22, r25
    10ae:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
    10b2:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Level)
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	3a 87       	std	Y+10, r19	; 0x0a
    10bc:	29 87       	std	Y+9, r18	; 0x09
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <M_Dio_SetPinValue+0x46>
    10c6:	76 c0       	rjmp	.+236    	; 0x11b4 <M_Dio_SetPinValue+0x132>
    10c8:	29 85       	ldd	r18, Y+9	; 0x09
    10ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <M_Dio_SetPinValue+0x52>
    10d2:	e4 c0       	rjmp	.+456    	; 0x129c <M_Dio_SetPinValue+0x21a>
	{
	case HIGH:
		switch (Local_u8_Port)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	38 87       	std	Y+8, r19	; 0x08
    10dc:	2f 83       	std	Y+7, r18	; 0x07
    10de:	8f 81       	ldd	r24, Y+7	; 0x07
    10e0:	98 85       	ldd	r25, Y+8	; 0x08
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	91 05       	cpc	r25, r1
    10e6:	51 f1       	breq	.+84     	; 0x113c <M_Dio_SetPinValue+0xba>
    10e8:	2f 81       	ldd	r18, Y+7	; 0x07
    10ea:	38 85       	ldd	r19, Y+8	; 0x08
    10ec:	23 30       	cpi	r18, 0x03	; 3
    10ee:	31 05       	cpc	r19, r1
    10f0:	34 f4       	brge	.+12     	; 0x10fe <M_Dio_SetPinValue+0x7c>
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	98 85       	ldd	r25, Y+8	; 0x08
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	91 05       	cpc	r25, r1
    10fa:	61 f0       	breq	.+24     	; 0x1114 <M_Dio_SetPinValue+0x92>
    10fc:	cf c0       	rjmp	.+414    	; 0x129c <M_Dio_SetPinValue+0x21a>
    10fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1100:	38 85       	ldd	r19, Y+8	; 0x08
    1102:	23 30       	cpi	r18, 0x03	; 3
    1104:	31 05       	cpc	r19, r1
    1106:	71 f1       	breq	.+92     	; 0x1164 <M_Dio_SetPinValue+0xe2>
    1108:	8f 81       	ldd	r24, Y+7	; 0x07
    110a:	98 85       	ldd	r25, Y+8	; 0x08
    110c:	84 30       	cpi	r24, 0x04	; 4
    110e:	91 05       	cpc	r25, r1
    1110:	e9 f1       	breq	.+122    	; 0x118c <M_Dio_SetPinValue+0x10a>
    1112:	c4 c0       	rjmp	.+392    	; 0x129c <M_Dio_SetPinValue+0x21a>
		{
		case A:SetBit(PORTA,Local_u8_Pin);  break;
    1114:	ab e3       	ldi	r26, 0x3B	; 59
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <M_Dio_SetPinValue+0xb0>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <M_Dio_SetPinValue+0xac>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	b0 c0       	rjmp	.+352    	; 0x129c <M_Dio_SetPinValue+0x21a>
		case B:SetBit(PORTB,Local_u8_Pin);  break;
    113c:	a8 e3       	ldi	r26, 0x38	; 56
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <M_Dio_SetPinValue+0xd8>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <M_Dio_SetPinValue+0xd4>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	9c c0       	rjmp	.+312    	; 0x129c <M_Dio_SetPinValue+0x21a>
		case C:SetBit(PORTC,Local_u8_Pin);  break;
    1164:	a5 e3       	ldi	r26, 0x35	; 53
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e3       	ldi	r30, 0x35	; 53
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <M_Dio_SetPinValue+0x100>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <M_Dio_SetPinValue+0xfc>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	88 c0       	rjmp	.+272    	; 0x129c <M_Dio_SetPinValue+0x21a>
		case D:SetBit(PORTD,Local_u8_Pin);  break;
    118c:	a2 e3       	ldi	r26, 0x32	; 50
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e2 e3       	ldi	r30, 0x32	; 50
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <M_Dio_SetPinValue+0x128>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <M_Dio_SetPinValue+0x124>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	74 c0       	rjmp	.+232    	; 0x129c <M_Dio_SetPinValue+0x21a>
		default:                            break;
		}
		break;
		case LOW:
			switch (Local_u8_Port)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3e 83       	std	Y+6, r19	; 0x06
    11bc:	2d 83       	std	Y+5, r18	; 0x05
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	91 05       	cpc	r25, r1
    11c6:	61 f1       	breq	.+88     	; 0x1220 <M_Dio_SetPinValue+0x19e>
    11c8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ca:	3e 81       	ldd	r19, Y+6	; 0x06
    11cc:	23 30       	cpi	r18, 0x03	; 3
    11ce:	31 05       	cpc	r19, r1
    11d0:	34 f4       	brge	.+12     	; 0x11de <M_Dio_SetPinValue+0x15c>
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	69 f0       	breq	.+26     	; 0x11f6 <M_Dio_SetPinValue+0x174>
    11dc:	5f c0       	rjmp	.+190    	; 0x129c <M_Dio_SetPinValue+0x21a>
    11de:	2d 81       	ldd	r18, Y+5	; 0x05
    11e0:	3e 81       	ldd	r19, Y+6	; 0x06
    11e2:	23 30       	cpi	r18, 0x03	; 3
    11e4:	31 05       	cpc	r19, r1
    11e6:	89 f1       	breq	.+98     	; 0x124a <M_Dio_SetPinValue+0x1c8>
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <M_Dio_SetPinValue+0x172>
    11f2:	40 c0       	rjmp	.+128    	; 0x1274 <M_Dio_SetPinValue+0x1f2>
    11f4:	53 c0       	rjmp	.+166    	; 0x129c <M_Dio_SetPinValue+0x21a>
			{
			case A:ClrBit(PORTA,Local_u8_Pin);  break;
    11f6:	ab e3       	ldi	r26, 0x3B	; 59
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e3       	ldi	r30, 0x3B	; 59
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <M_Dio_SetPinValue+0x192>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <M_Dio_SetPinValue+0x18e>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	3e c0       	rjmp	.+124    	; 0x129c <M_Dio_SetPinValue+0x21a>
			case B:ClrBit(PORTB,Local_u8_Pin);  break;
    1220:	a8 e3       	ldi	r26, 0x38	; 56
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <M_Dio_SetPinValue+0x1bc>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <M_Dio_SetPinValue+0x1b8>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	29 c0       	rjmp	.+82     	; 0x129c <M_Dio_SetPinValue+0x21a>
			case C:ClrBit(PORTC,Local_u8_Pin);  break;
    124a:	a5 e3       	ldi	r26, 0x35	; 53
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <M_Dio_SetPinValue+0x1e6>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <M_Dio_SetPinValue+0x1e2>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	14 c0       	rjmp	.+40     	; 0x129c <M_Dio_SetPinValue+0x21a>
			case D:ClrBit(PORTD,Local_u8_Pin);  break;
    1274:	a2 e3       	ldi	r26, 0x32	; 50
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <M_Dio_SetPinValue+0x210>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <M_Dio_SetPinValue+0x20c>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
			break;
			default:                              break;

	}

}
    129c:	2a 96       	adiw	r28, 0x0a	; 10
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <M_Dio_SetPortValue>:

void M_Dio_SetPortValue(uint8_t Local_u8_Port,uint8_t Local_u8_Value)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <M_Dio_SetPortValue+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <M_Dio_SetPortValue+0x8>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Local_u8_Port)
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3c 83       	std	Y+4, r19	; 0x04
    12c6:	2b 83       	std	Y+3, r18	; 0x03
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	91 05       	cpc	r25, r1
    12d0:	d9 f0       	breq	.+54     	; 0x1308 <M_Dio_SetPortValue+0x5a>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	23 30       	cpi	r18, 0x03	; 3
    12d8:	31 05       	cpc	r19, r1
    12da:	34 f4       	brge	.+12     	; 0x12e8 <M_Dio_SetPortValue+0x3a>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	61 f0       	breq	.+24     	; 0x12fe <M_Dio_SetPortValue+0x50>
    12e6:	1e c0       	rjmp	.+60     	; 0x1324 <M_Dio_SetPortValue+0x76>
    12e8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ea:	3c 81       	ldd	r19, Y+4	; 0x04
    12ec:	23 30       	cpi	r18, 0x03	; 3
    12ee:	31 05       	cpc	r19, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <M_Dio_SetPortValue+0x64>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	84 30       	cpi	r24, 0x04	; 4
    12f8:	91 05       	cpc	r25, r1
    12fa:	81 f0       	breq	.+32     	; 0x131c <M_Dio_SetPortValue+0x6e>
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <M_Dio_SetPortValue+0x76>
	{
	case A: PORTA=Local_u8_Value; break;
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	0e c0       	rjmp	.+28     	; 0x1324 <M_Dio_SetPortValue+0x76>
	case B: PORTB=Local_u8_Value; break;
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <M_Dio_SetPortValue+0x76>
	case C: PORTC=Local_u8_Value; break;
    1312:	e5 e3       	ldi	r30, 0x35	; 53
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <M_Dio_SetPortValue+0x76>
	case D: PORTD=Local_u8_Value; break;
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
	default:                          break;
	}
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <M_Dio_getPortValue>:

uint8_t   M_Dio_getPortValue(uint8_t Local_u8_Port)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <M_Dio_getPortValue+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <M_Dio_getPortValue+0x8>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Value=0;
    1340:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8_Port)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3c 83       	std	Y+4, r19	; 0x04
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	91 05       	cpc	r25, r1
    1354:	d9 f0       	breq	.+54     	; 0x138c <M_Dio_getPortValue+0x5a>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	23 30       	cpi	r18, 0x03	; 3
    135c:	31 05       	cpc	r19, r1
    135e:	34 f4       	brge	.+12     	; 0x136c <M_Dio_getPortValue+0x3a>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	61 f0       	breq	.+24     	; 0x1382 <M_Dio_getPortValue+0x50>
    136a:	1e c0       	rjmp	.+60     	; 0x13a8 <M_Dio_getPortValue+0x76>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3c 81       	ldd	r19, Y+4	; 0x04
    1370:	23 30       	cpi	r18, 0x03	; 3
    1372:	31 05       	cpc	r19, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <M_Dio_getPortValue+0x64>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	91 05       	cpc	r25, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <M_Dio_getPortValue+0x6e>
    1380:	13 c0       	rjmp	.+38     	; 0x13a8 <M_Dio_getPortValue+0x76>
	{
	case A:Value=PORTA; break;
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <M_Dio_getPortValue+0x76>
	case B:Value=PORTB; break;
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <M_Dio_getPortValue+0x76>
	case C:Value=PORTC; break;
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <M_Dio_getPortValue+0x76>
	case D:Value=PORTD; break;
    13a0:	e2 e3       	ldi	r30, 0x32	; 50
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	89 83       	std	Y+1, r24	; 0x01
	default:            break;
	}
	return Value;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <M_Dio_getPinValue>:

uint8_t M_Dio_getPinValue(uint8_t Local_u8_Num)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <M_Dio_getPinValue+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <M_Dio_getPinValue+0x8>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <M_Dio_getPinValue+0xa>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t Local_u8_Pin =Local_u8_Num %10;
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9a e0       	ldi	r25, 0x0A	; 10
    13cc:	69 2f       	mov	r22, r25
    13ce:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
    13d2:	89 2f       	mov	r24, r25
    13d4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Local_u8_Port =Local_u8_Num /10;
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9a e0       	ldi	r25, 0x0A	; 10
    13da:	69 2f       	mov	r22, r25
    13dc:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
    13e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_PinReading =0;
    13e2:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8_Port)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3e 83       	std	Y+6, r19	; 0x06
    13ec:	2d 83       	std	Y+5, r18	; 0x05
    13ee:	4d 81       	ldd	r20, Y+5	; 0x05
    13f0:	5e 81       	ldd	r21, Y+6	; 0x06
    13f2:	42 30       	cpi	r20, 0x02	; 2
    13f4:	51 05       	cpc	r21, r1
    13f6:	41 f1       	breq	.+80     	; 0x1448 <M_Dio_getPinValue+0x90>
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	34 f4       	brge	.+12     	; 0x140e <M_Dio_getPinValue+0x56>
    1402:	2d 81       	ldd	r18, Y+5	; 0x05
    1404:	3e 81       	ldd	r19, Y+6	; 0x06
    1406:	21 30       	cpi	r18, 0x01	; 1
    1408:	31 05       	cpc	r19, r1
    140a:	61 f0       	breq	.+24     	; 0x1424 <M_Dio_getPinValue+0x6c>
    140c:	52 c0       	rjmp	.+164    	; 0x14b2 <M_Dio_getPinValue+0xfa>
    140e:	4d 81       	ldd	r20, Y+5	; 0x05
    1410:	5e 81       	ldd	r21, Y+6	; 0x06
    1412:	43 30       	cpi	r20, 0x03	; 3
    1414:	51 05       	cpc	r21, r1
    1416:	51 f1       	breq	.+84     	; 0x146c <M_Dio_getPinValue+0xb4>
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	91 05       	cpc	r25, r1
    1420:	b9 f1       	breq	.+110    	; 0x1490 <M_Dio_getPinValue+0xd8>
    1422:	47 c0       	rjmp	.+142    	; 0x14b2 <M_Dio_getPinValue+0xfa>
	{
	case 1:Local_u8_PinReading=GetBit(PINA,Local_u8_Pin);  break;
    1424:	e9 e3       	ldi	r30, 0x39	; 57
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <M_Dio_getPinValue+0x84>
    1438:	55 95       	asr	r21
    143a:	47 95       	ror	r20
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <M_Dio_getPinValue+0x80>
    1440:	ca 01       	movw	r24, r20
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	35 c0       	rjmp	.+106    	; 0x14b2 <M_Dio_getPinValue+0xfa>
	case 2:Local_u8_PinReading=GetBit(PINB,Local_u8_Pin);  break;
    1448:	e6 e3       	ldi	r30, 0x36	; 54
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <M_Dio_getPinValue+0xa8>
    145c:	55 95       	asr	r21
    145e:	47 95       	ror	r20
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <M_Dio_getPinValue+0xa4>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	23 c0       	rjmp	.+70     	; 0x14b2 <M_Dio_getPinValue+0xfa>
	case 3:Local_u8_PinReading=GetBit(PINC,Local_u8_Pin);  break;
    146c:	e3 e3       	ldi	r30, 0x33	; 51
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <M_Dio_getPinValue+0xcc>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <M_Dio_getPinValue+0xc8>
    1488:	ca 01       	movw	r24, r20
    148a:	81 70       	andi	r24, 0x01	; 1
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	11 c0       	rjmp	.+34     	; 0x14b2 <M_Dio_getPinValue+0xfa>
	case 4:Local_u8_PinReading=GetBit(PIND,Local_u8_Pin);  break;
    1490:	e0 e3       	ldi	r30, 0x30	; 48
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <M_Dio_getPinValue+0xf0>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <M_Dio_getPinValue+0xec>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
	default:                                               break;

	}
	return Local_u8_PinReading;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b4:	26 96       	adiw	r28, 0x06	; 6
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <M_Dio_SetPullUPRes>:

void M_Dio_SetPullUPRes(uint8_t Local_u8_Num)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <M_Dio_SetPullUPRes+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <M_Dio_SetPullUPRes+0x8>
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Local_u8_Pin = Local_u8_Num %10;
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9a e0       	ldi	r25, 0x0A	; 10
    14da:	69 2f       	mov	r22, r25
    14dc:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
    14e0:	89 2f       	mov	r24, r25
    14e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_Port = Local_u8_Num /10;
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9a e0       	ldi	r25, 0x0A	; 10
    14e8:	69 2f       	mov	r22, r25
    14ea:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__udivmodqi4>
    14ee:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_SetPinDirection(Local_u8_Num,INPUT);
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	switch(Local_u8_Port)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3d 83       	std	Y+5, r19	; 0x05
    1500:	2c 83       	std	Y+4, r18	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	91 05       	cpc	r25, r1
    150a:	51 f1       	breq	.+84     	; 0x1560 <M_Dio_SetPullUPRes+0x9a>
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	23 30       	cpi	r18, 0x03	; 3
    1512:	31 05       	cpc	r19, r1
    1514:	34 f4       	brge	.+12     	; 0x1522 <M_Dio_SetPullUPRes+0x5c>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	61 f0       	breq	.+24     	; 0x1538 <M_Dio_SetPullUPRes+0x72>
    1520:	5a c0       	rjmp	.+180    	; 0x15d6 <M_Dio_SetPullUPRes+0x110>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	23 30       	cpi	r18, 0x03	; 3
    1528:	31 05       	cpc	r19, r1
    152a:	71 f1       	breq	.+92     	; 0x1588 <M_Dio_SetPullUPRes+0xc2>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	e9 f1       	breq	.+122    	; 0x15b0 <M_Dio_SetPullUPRes+0xea>
    1536:	4f c0       	rjmp	.+158    	; 0x15d6 <M_Dio_SetPullUPRes+0x110>
	{
	case A: SetBit(PORTA,Local_u8_Pin); break;
    1538:	ab e3       	ldi	r26, 0x3B	; 59
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <M_Dio_SetPullUPRes+0x90>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <M_Dio_SetPullUPRes+0x8c>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	3b c0       	rjmp	.+118    	; 0x15d6 <M_Dio_SetPullUPRes+0x110>
	case B: SetBit(PORTB,Local_u8_Pin); break;
    1560:	a8 e3       	ldi	r26, 0x38	; 56
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e8 e3       	ldi	r30, 0x38	; 56
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <M_Dio_SetPullUPRes+0xb8>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <M_Dio_SetPullUPRes+0xb4>
    1582:	84 2b       	or	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <M_Dio_SetPullUPRes+0x110>
	case C: SetBit(PORTC,Local_u8_Pin); break;
    1588:	a5 e3       	ldi	r26, 0x35	; 53
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e5 e3       	ldi	r30, 0x35	; 53
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <M_Dio_SetPullUPRes+0xe0>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <M_Dio_SetPullUPRes+0xdc>
    15aa:	84 2b       	or	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <M_Dio_SetPullUPRes+0x110>
	case D: SetBit(PORTD,Local_u8_Pin); break;
    15b0:	a2 e3       	ldi	r26, 0x32	; 50
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e2 e3       	ldi	r30, 0x32	; 50
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <M_Dio_SetPullUPRes+0x108>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <M_Dio_SetPullUPRes+0x104>
    15d2:	84 2b       	or	r24, r20
    15d4:	8c 93       	st	X, r24
	default:                                break;
	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <H_Ssd_Init>:
 *      Author: Mohamed Safwat
 */

#include "SSD.h"
void H_Ssd_Init(void)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	//setting the Driver pins as output
	M_Dio_SetPinDirection(COM1,OUTPUT);
    15ee:	8d e0       	ldi	r24, 0x0D	; 13
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(COM2,OUTPUT);
    15f6:	8c e0       	ldi	r24, 0x0C	; 12
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(COM3,OUTPUT);
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	61 e0       	ldi	r22, 0x01	; 1
    1602:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(COM4,OUTPUT);
    1606:	8a e1       	ldi	r24, 0x1A	; 26
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>

	M_Dio_SetPinDirection(Data_Pin_0,OUTPUT);
    160e:	84 e1       	ldi	r24, 0x14	; 20
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Data_Pin_1,OUTPUT);
    1616:	85 e1       	ldi	r24, 0x15	; 21
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Data_Pin_2,OUTPUT);
    161e:	86 e1       	ldi	r24, 0x16	; 22
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Data_Pin_3,OUTPUT);
    1626:	88 e1       	ldi	r24, 0x18	; 24
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>

}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <H_Ssd_Write>:

void H_Ssd_Write(uint16_t local_u16_Number)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	27 97       	sbiw	r28, 0x07	; 7
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	9f 83       	std	Y+7, r25	; 0x07
    164a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t Local_u8_Counter=0;
    164c:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t local_u8_Thuns=local_u16_Number /1000;
    164e:	8e 81       	ldd	r24, Y+6	; 0x06
    1650:	9f 81       	ldd	r25, Y+7	; 0x07
    1652:	28 ee       	ldi	r18, 0xE8	; 232
    1654:	33 e0       	ldi	r19, 0x03	; 3
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    165c:	cb 01       	movw	r24, r22
    165e:	8c 83       	std	Y+4, r24	; 0x04
	local_u16_Number %=1000;
    1660:	8e 81       	ldd	r24, Y+6	; 0x06
    1662:	9f 81       	ldd	r25, Y+7	; 0x07
    1664:	28 ee       	ldi	r18, 0xE8	; 232
    1666:	33 e0       	ldi	r19, 0x03	; 3
    1668:	b9 01       	movw	r22, r18
    166a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    166e:	9f 83       	std	Y+7, r25	; 0x07
    1670:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t local_u8_Hund=local_u16_Number /100;
    1672:	8e 81       	ldd	r24, Y+6	; 0x06
    1674:	9f 81       	ldd	r25, Y+7	; 0x07
    1676:	24 e6       	ldi	r18, 0x64	; 100
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	b9 01       	movw	r22, r18
    167c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    1680:	cb 01       	movw	r24, r22
    1682:	8b 83       	std	Y+3, r24	; 0x03
	local_u16_Number %=100;
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	9f 81       	ldd	r25, Y+7	; 0x07
    1688:	24 e6       	ldi	r18, 0x64	; 100
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	b9 01       	movw	r22, r18
    168e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    1692:	9f 83       	std	Y+7, r25	; 0x07
    1694:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t local_u8_Unit=local_u16_Number %10;
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9f 81       	ldd	r25, Y+7	; 0x07
    169a:	2a e0       	ldi	r18, 0x0A	; 10
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	b9 01       	movw	r22, r18
    16a0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    16a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t local_u8_Tens=local_u16_Number /10;
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	9f 81       	ldd	r25, Y+7	; 0x07
    16aa:	2a e0       	ldi	r18, 0x0A	; 10
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	b9 01       	movw	r22, r18
    16b0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__udivmodhi4>
    16b4:	cb 01       	movw	r24, r22
    16b6:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8_Counter=0;Local_u8_Counter<50;Local_u8_Counter++)
    16b8:	1d 82       	std	Y+5, r1	; 0x05
    16ba:	13 c0       	rjmp	.+38     	; 0x16e2 <H_Ssd_Write+0xae>
	{
		H_SSD_DigitDisplay(local_u8_Unit,Ssd_One);
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <H_SSD_DigitDisplay>
		H_SSD_DigitDisplay(local_u8_Tens,Ssd_Two);
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <H_SSD_DigitDisplay>
		H_SSD_DigitDisplay(local_u8_Hund,Ssd_Three);
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	63 e0       	ldi	r22, 0x03	; 3
    16d0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <H_SSD_DigitDisplay>
		H_SSD_DigitDisplay(local_u8_Thuns,Ssd_Four);
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	64 e0       	ldi	r22, 0x04	; 4
    16d8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <H_SSD_DigitDisplay>
	local_u16_Number %=1000;
	uint8_t local_u8_Hund=local_u16_Number /100;
	local_u16_Number %=100;
	uint8_t local_u8_Unit=local_u16_Number %10;
	uint8_t local_u8_Tens=local_u16_Number /10;
	for (Local_u8_Counter=0;Local_u8_Counter<50;Local_u8_Counter++)
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	82 33       	cpi	r24, 0x32	; 50
    16e6:	50 f3       	brcs	.-44     	; 0x16bc <H_Ssd_Write+0x88>
		H_SSD_DigitDisplay(local_u8_Tens,Ssd_Two);
		H_SSD_DigitDisplay(local_u8_Hund,Ssd_Three);
		H_SSD_DigitDisplay(local_u8_Thuns,Ssd_Four);
	}

}
    16e8:	27 96       	adiw	r28, 0x07	; 7
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <H_SSD_DigitDisplay>:

 void H_SSD_DigitDisplay(uint8_t Local_u8_Number,uint8_t Local_u8_Sd)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	64 97       	sbiw	r28, 0x14	; 20
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	8f 87       	std	Y+15, r24	; 0x0f
    1710:	68 8b       	std	Y+16, r22	; 0x10
	switch(Local_u8_Sd)
    1712:	88 89       	ldd	r24, Y+16	; 0x10
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3c 8b       	std	Y+20, r19	; 0x14
    171a:	2b 8b       	std	Y+19, r18	; 0x13
    171c:	8b 89       	ldd	r24, Y+19	; 0x13
    171e:	9c 89       	ldd	r25, Y+20	; 0x14
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	91 05       	cpc	r25, r1
    1724:	39 f1       	breq	.+78     	; 0x1774 <H_SSD_DigitDisplay+0x7a>
    1726:	2b 89       	ldd	r18, Y+19	; 0x13
    1728:	3c 89       	ldd	r19, Y+20	; 0x14
    172a:	23 30       	cpi	r18, 0x03	; 3
    172c:	31 05       	cpc	r19, r1
    172e:	34 f4       	brge	.+12     	; 0x173c <H_SSD_DigitDisplay+0x42>
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	61 f0       	breq	.+24     	; 0x1752 <H_SSD_DigitDisplay+0x58>
    173a:	4e c0       	rjmp	.+156    	; 0x17d8 <H_SSD_DigitDisplay+0xde>
    173c:	2b 89       	ldd	r18, Y+19	; 0x13
    173e:	3c 89       	ldd	r19, Y+20	; 0x14
    1740:	23 30       	cpi	r18, 0x03	; 3
    1742:	31 05       	cpc	r19, r1
    1744:	41 f1       	breq	.+80     	; 0x1796 <H_SSD_DigitDisplay+0x9c>
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	91 05       	cpc	r25, r1
    174e:	a1 f1       	breq	.+104    	; 0x17b8 <H_SSD_DigitDisplay+0xbe>
    1750:	43 c0       	rjmp	.+134    	; 0x17d8 <H_SSD_DigitDisplay+0xde>
	{
	case Ssd_One:
		M_Dio_SetPinValue(COM1,LOW);
    1752:	8d e0       	ldi	r24, 0x0D	; 13
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM2,HIGH);
    175a:	8c e0       	ldi	r24, 0x0C	; 12
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM3,HIGH);
    1762:	89 e1       	ldi	r24, 0x19	; 25
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM4,HIGH);
    176a:	8a e1       	ldi	r24, 0x1A	; 26
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1772:	32 c0       	rjmp	.+100    	; 0x17d8 <H_SSD_DigitDisplay+0xde>
		break;
	case Ssd_Two:
		M_Dio_SetPinValue(COM1,HIGH);
    1774:	8d e0       	ldi	r24, 0x0D	; 13
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM2,LOW);
    177c:	8c e0       	ldi	r24, 0x0C	; 12
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM3,HIGH);
    1784:	89 e1       	ldi	r24, 0x19	; 25
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM4,HIGH);
    178c:	8a e1       	ldi	r24, 0x1A	; 26
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1794:	21 c0       	rjmp	.+66     	; 0x17d8 <H_SSD_DigitDisplay+0xde>
		break;
	case Ssd_Three:
		M_Dio_SetPinValue(COM1,HIGH);
    1796:	8d e0       	ldi	r24, 0x0D	; 13
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM2,HIGH);
    179e:	8c e0       	ldi	r24, 0x0C	; 12
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM3,LOW);
    17a6:	89 e1       	ldi	r24, 0x19	; 25
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM4,HIGH);
    17ae:	8a e1       	ldi	r24, 0x1A	; 26
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    17b6:	10 c0       	rjmp	.+32     	; 0x17d8 <H_SSD_DigitDisplay+0xde>
		break;
	case Ssd_Four:
		M_Dio_SetPinValue(COM1,HIGH);
    17b8:	8d e0       	ldi	r24, 0x0D	; 13
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM2,HIGH);
    17c0:	8c e0       	ldi	r24, 0x0C	; 12
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM3,HIGH);
    17c8:	89 e1       	ldi	r24, 0x19	; 25
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(COM4,LOW);
    17d0:	8a e1       	ldi	r24, 0x1A	; 26
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		break;
	default:                  break;
	}
	switch(Local_u8_Number)
    17d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3a 8b       	std	Y+18, r19	; 0x12
    17e0:	29 8b       	std	Y+17, r18	; 0x11
    17e2:	89 89       	ldd	r24, Y+17	; 0x11
    17e4:	9a 89       	ldd	r25, Y+18	; 0x12
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <H_SSD_DigitDisplay+0xf4>
    17ec:	8b c0       	rjmp	.+278    	; 0x1904 <H_SSD_DigitDisplay+0x20a>
    17ee:	29 89       	ldd	r18, Y+17	; 0x11
    17f0:	3a 89       	ldd	r19, Y+18	; 0x12
    17f2:	25 30       	cpi	r18, 0x05	; 5
    17f4:	31 05       	cpc	r19, r1
    17f6:	ec f4       	brge	.+58     	; 0x1832 <H_SSD_DigitDisplay+0x138>
    17f8:	89 89       	ldd	r24, Y+17	; 0x11
    17fa:	9a 89       	ldd	r25, Y+18	; 0x12
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <H_SSD_DigitDisplay+0x10a>
    1802:	4d c0       	rjmp	.+154    	; 0x189e <H_SSD_DigitDisplay+0x1a4>
    1804:	29 89       	ldd	r18, Y+17	; 0x11
    1806:	3a 89       	ldd	r19, Y+18	; 0x12
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	2c f4       	brge	.+10     	; 0x1818 <H_SSD_DigitDisplay+0x11e>
    180e:	89 89       	ldd	r24, Y+17	; 0x11
    1810:	9a 89       	ldd	r25, Y+18	; 0x12
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	99 f1       	breq	.+102    	; 0x187c <H_SSD_DigitDisplay+0x182>
    1816:	db c0       	rjmp	.+438    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
    1818:	29 89       	ldd	r18, Y+17	; 0x11
    181a:	3a 89       	ldd	r19, Y+18	; 0x12
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <H_SSD_DigitDisplay+0x12a>
    1822:	4e c0       	rjmp	.+156    	; 0x18c0 <H_SSD_DigitDisplay+0x1c6>
    1824:	89 89       	ldd	r24, Y+17	; 0x11
    1826:	9a 89       	ldd	r25, Y+18	; 0x12
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	91 05       	cpc	r25, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <H_SSD_DigitDisplay+0x136>
    182e:	59 c0       	rjmp	.+178    	; 0x18e2 <H_SSD_DigitDisplay+0x1e8>
    1830:	ce c0       	rjmp	.+412    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
    1832:	29 89       	ldd	r18, Y+17	; 0x11
    1834:	3a 89       	ldd	r19, Y+18	; 0x12
    1836:	27 30       	cpi	r18, 0x07	; 7
    1838:	31 05       	cpc	r19, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <H_SSD_DigitDisplay+0x144>
    183c:	96 c0       	rjmp	.+300    	; 0x196a <H_SSD_DigitDisplay+0x270>
    183e:	89 89       	ldd	r24, Y+17	; 0x11
    1840:	9a 89       	ldd	r25, Y+18	; 0x12
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	91 05       	cpc	r25, r1
    1846:	6c f4       	brge	.+26     	; 0x1862 <H_SSD_DigitDisplay+0x168>
    1848:	29 89       	ldd	r18, Y+17	; 0x11
    184a:	3a 89       	ldd	r19, Y+18	; 0x12
    184c:	25 30       	cpi	r18, 0x05	; 5
    184e:	31 05       	cpc	r19, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <H_SSD_DigitDisplay+0x15a>
    1852:	69 c0       	rjmp	.+210    	; 0x1926 <H_SSD_DigitDisplay+0x22c>
    1854:	89 89       	ldd	r24, Y+17	; 0x11
    1856:	9a 89       	ldd	r25, Y+18	; 0x12
    1858:	86 30       	cpi	r24, 0x06	; 6
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <H_SSD_DigitDisplay+0x166>
    185e:	74 c0       	rjmp	.+232    	; 0x1948 <H_SSD_DigitDisplay+0x24e>
    1860:	b6 c0       	rjmp	.+364    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
    1862:	29 89       	ldd	r18, Y+17	; 0x11
    1864:	3a 89       	ldd	r19, Y+18	; 0x12
    1866:	28 30       	cpi	r18, 0x08	; 8
    1868:	31 05       	cpc	r19, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <H_SSD_DigitDisplay+0x174>
    186c:	8f c0       	rjmp	.+286    	; 0x198c <H_SSD_DigitDisplay+0x292>
    186e:	89 89       	ldd	r24, Y+17	; 0x11
    1870:	9a 89       	ldd	r25, Y+18	; 0x12
    1872:	89 30       	cpi	r24, 0x09	; 9
    1874:	91 05       	cpc	r25, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <H_SSD_DigitDisplay+0x180>
    1878:	9a c0       	rjmp	.+308    	; 0x19ae <H_SSD_DigitDisplay+0x2b4>
    187a:	a9 c0       	rjmp	.+338    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
	{
	case Zero:
		M_Dio_SetPinValue(Data_Pin_0,LOW);
    187c:	84 e1       	ldi	r24, 0x14	; 20
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,LOW);
    1884:	85 e1       	ldi	r24, 0x15	; 21
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,LOW);
    188c:	86 e1       	ldi	r24, 0x16	; 22
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    1894:	88 e1       	ldi	r24, 0x18	; 24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    189c:	98 c0       	rjmp	.+304    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case One:
		M_Dio_SetPinValue(Data_Pin_0,HIGH);
    189e:	84 e1       	ldi	r24, 0x14	; 20
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,LOW);
    18a6:	85 e1       	ldi	r24, 0x15	; 21
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,LOW);
    18ae:	86 e1       	ldi	r24, 0x16	; 22
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    18b6:	88 e1       	ldi	r24, 0x18	; 24
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    18be:	87 c0       	rjmp	.+270    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Two:
		M_Dio_SetPinValue(Data_Pin_0,LOW);
    18c0:	84 e1       	ldi	r24, 0x14	; 20
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,HIGH);
    18c8:	85 e1       	ldi	r24, 0x15	; 21
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,LOW);
    18d0:	86 e1       	ldi	r24, 0x16	; 22
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    18d8:	88 e1       	ldi	r24, 0x18	; 24
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    18e0:	76 c0       	rjmp	.+236    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Three:
		M_Dio_SetPinValue(Data_Pin_0,HIGH);
    18e2:	84 e1       	ldi	r24, 0x14	; 20
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,HIGH);
    18ea:	85 e1       	ldi	r24, 0x15	; 21
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,LOW);
    18f2:	86 e1       	ldi	r24, 0x16	; 22
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    18fa:	88 e1       	ldi	r24, 0x18	; 24
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1902:	65 c0       	rjmp	.+202    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Four:
		M_Dio_SetPinValue(Data_Pin_0,LOW);
    1904:	84 e1       	ldi	r24, 0x14	; 20
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,LOW);
    190c:	85 e1       	ldi	r24, 0x15	; 21
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,HIGH);
    1914:	86 e1       	ldi	r24, 0x16	; 22
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    191c:	88 e1       	ldi	r24, 0x18	; 24
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1924:	54 c0       	rjmp	.+168    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Five:
		M_Dio_SetPinValue(Data_Pin_0,HIGH);
    1926:	84 e1       	ldi	r24, 0x14	; 20
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,LOW);
    192e:	85 e1       	ldi	r24, 0x15	; 21
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,HIGH);
    1936:	86 e1       	ldi	r24, 0x16	; 22
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    193e:	88 e1       	ldi	r24, 0x18	; 24
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Six:
		M_Dio_SetPinValue(Data_Pin_0,LOW);
    1948:	84 e1       	ldi	r24, 0x14	; 20
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,HIGH);
    1950:	85 e1       	ldi	r24, 0x15	; 21
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,HIGH);
    1958:	86 e1       	ldi	r24, 0x16	; 22
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    1960:	88 e1       	ldi	r24, 0x18	; 24
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1968:	32 c0       	rjmp	.+100    	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Seven:
		M_Dio_SetPinValue(Data_Pin_0,HIGH);
    196a:	84 e1       	ldi	r24, 0x14	; 20
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,HIGH);
    1972:	85 e1       	ldi	r24, 0x15	; 21
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,HIGH);
    197a:	86 e1       	ldi	r24, 0x16	; 22
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,LOW);
    1982:	88 e1       	ldi	r24, 0x18	; 24
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    198a:	21 c0       	rjmp	.+66     	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Eight:
		M_Dio_SetPinValue(Data_Pin_0,LOW);
    198c:	84 e1       	ldi	r24, 0x14	; 20
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,LOW);
    1994:	85 e1       	ldi	r24, 0x15	; 21
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,LOW);
    199c:	86 e1       	ldi	r24, 0x16	; 22
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,HIGH);
    19a4:	88 e1       	ldi	r24, 0x18	; 24
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    19ac:	10 c0       	rjmp	.+32     	; 0x19ce <H_SSD_DigitDisplay+0x2d4>
		break;
	case Nine:
		M_Dio_SetPinValue(Data_Pin_0,HIGH);
    19ae:	84 e1       	ldi	r24, 0x14	; 20
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_1,LOW);
    19b6:	85 e1       	ldi	r24, 0x15	; 21
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_2,LOW);
    19be:	86 e1       	ldi	r24, 0x16	; 22
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		M_Dio_SetPinValue(Data_Pin_3,HIGH);
    19c6:	88 e1       	ldi	r24, 0x18	; 24
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e4       	ldi	r27, 0x40	; 64
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a e7       	ldi	r20, 0x7A	; 122
    19ec:	55 e4       	ldi	r21, 0x45	; 69
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <H_SSD_DigitDisplay+0x326>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <H_SSD_DigitDisplay+0x3a4>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <H_SSD_DigitDisplay+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <H_SSD_DigitDisplay+0x386>
    1a62:	80 e9       	ldi	r24, 0x90	; 144
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <H_SSD_DigitDisplay+0x374>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <H_SSD_DigitDisplay+0x368>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <H_SSD_DigitDisplay+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <H_SSD_DigitDisplay+0x3b0>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:                break;
	}
	_delay_ms(2);

}
    1ab2:	64 96       	adiw	r28, 0x14	; 20
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <H_Ssd_CounterUp>:
void H_Ssd_CounterUp(uint16_t Local_u16_Target)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <H_Ssd_CounterUp+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <H_Ssd_CounterUp+0x8>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t Local_u16_Number =0;
    1ad4:	1a 82       	std	Y+2, r1	; 0x02
    1ad6:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u16_Number=0;Local_u16_Number<=Local_u16_Target;Local_u16_Number++)
    1ad8:	1a 82       	std	Y+2, r1	; 0x02
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	09 c0       	rjmp	.+18     	; 0x1af0 <H_Ssd_CounterUp+0x2c>
	{
		H_Ssd_Write(Local_u16_Number);
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <H_Ssd_Write>

}
void H_Ssd_CounterUp(uint16_t Local_u16_Target)
{
	uint16_t Local_u16_Number =0;
	for(Local_u16_Number=0;Local_u16_Number<=Local_u16_Target;Local_u16_Number++)
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	29 81       	ldd	r18, Y+1	; 0x01
    1af2:	3a 81       	ldd	r19, Y+2	; 0x02
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	82 17       	cp	r24, r18
    1afa:	93 07       	cpc	r25, r19
    1afc:	80 f7       	brcc	.-32     	; 0x1ade <H_Ssd_CounterUp+0x1a>
	{
		H_Ssd_Write(Local_u16_Number);
	}
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <H_Ssd_CounterDown>:

void H_Ssd_CounterDown(uint16_t Local_u16_Target)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <H_Ssd_CounterDown+0x6>
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	9b 83       	std	Y+3, r25	; 0x03
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u16_Number =0;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <H_Ssd_CounterDown+0x26>
	for(;Local_u16_Target>Local_u16_Number;Local_u16_Target--)
	{
		H_Ssd_Write(Local_u16_Target);
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	9b 81       	ldd	r25, Y+3	; 0x03
    1b24:	0e 94 1a 0b 	call	0x1634	; 0x1634 <H_Ssd_Write>
}

void H_Ssd_CounterDown(uint16_t Local_u16_Target)
{
	uint8_t Local_u16_Number =0;
	for(;Local_u16_Target>Local_u16_Number;Local_u16_Target--)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9b 83       	std	Y+3, r25	; 0x03
    1b30:	8a 83       	std	Y+2, r24	; 0x02
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3c:	28 17       	cp	r18, r24
    1b3e:	39 07       	cpc	r19, r25
    1b40:	78 f3       	brcs	.-34     	; 0x1b20 <H_Ssd_CounterDown+0x14>
	{
		H_Ssd_Write(Local_u16_Target);
	}

}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <H_Lcd_WriteCommand>:
 */

#include "Lcd.h"

void H_Lcd_WriteCommand(uint8_t Local_u8_Command)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	e9 97       	sbiw	r28, 0x39	; 57
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	89 af       	std	Y+57, r24	; 0x39
	M_Dio_SetPinValue(RS,LOW);
    1b64:	8d e0       	ldi	r24, 0x0D	; 13
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	Lcd_Data_Port =(((Local_u8_Command >>4)+0x08) & 0x17) | (Lcd_Data_Port &0xE8);
    1b6c:	a8 e3       	ldi	r26, 0x38	; 56
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	89 ad       	ldd	r24, Y+57	; 0x39
    1b72:	82 95       	swap	r24
    1b74:	8f 70       	andi	r24, 0x0F	; 15
    1b76:	88 5f       	subi	r24, 0xF8	; 248
    1b78:	98 2f       	mov	r25, r24
    1b7a:	97 71       	andi	r25, 0x17	; 23
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	88 7e       	andi	r24, 0xE8	; 232
    1b84:	89 2b       	or	r24, r25
    1b86:	8c 93       	st	X, r24
	M_Dio_SetPinValue(EN,HIGH);
    1b88:	8c e0       	ldi	r24, 0x0C	; 12
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8d ab       	std	Y+53, r24	; 0x35
    1b9a:	9e ab       	std	Y+54, r25	; 0x36
    1b9c:	af ab       	std	Y+55, r26	; 0x37
    1b9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	55 e4       	ldi	r21, 0x45	; 69
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	89 ab       	std	Y+49, r24	; 0x31
    1bba:	9a ab       	std	Y+50, r25	; 0x32
    1bbc:	ab ab       	std	Y+51, r26	; 0x33
    1bbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <H_Lcd_WriteCommand+0x94>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	98 ab       	std	Y+48, r25	; 0x30
    1bde:	8f a7       	std	Y+47, r24	; 0x2f
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <H_Lcd_WriteCommand+0x112>
	else if (__tmp > 65535)
    1be2:	69 a9       	ldd	r22, Y+49	; 0x31
    1be4:	7a a9       	ldd	r23, Y+50	; 0x32
    1be6:	8b a9       	ldd	r24, Y+51	; 0x33
    1be8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <H_Lcd_WriteCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bfe:	8f a9       	ldd	r24, Y+55	; 0x37
    1c00:	98 ad       	ldd	r25, Y+56	; 0x38
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <H_Lcd_WriteCommand+0xf4>
    1c24:	80 e9       	ldi	r24, 0x90	; 144
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	9e a7       	std	Y+46, r25	; 0x2e
    1c2a:	8d a7       	std	Y+45, r24	; 0x2d
    1c2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <H_Lcd_WriteCommand+0xe2>
    1c34:	9e a7       	std	Y+46, r25	; 0x2e
    1c36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	98 ab       	std	Y+48, r25	; 0x30
    1c40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c44:	98 a9       	ldd	r25, Y+48	; 0x30
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <H_Lcd_WriteCommand+0xd6>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <H_Lcd_WriteCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c50:	8b a9       	ldd	r24, Y+51	; 0x33
    1c52:	9c a9       	ldd	r25, Y+52	; 0x34
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	98 ab       	std	Y+48, r25	; 0x30
    1c5e:	8f a7       	std	Y+47, r24	; 0x2f
    1c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c62:	98 a9       	ldd	r25, Y+48	; 0x30
    1c64:	9c a7       	std	Y+44, r25	; 0x2c
    1c66:	8b a7       	std	Y+43, r24	; 0x2b
    1c68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <H_Lcd_WriteCommand+0x11e>
    1c70:	9c a7       	std	Y+44, r25	; 0x2c
    1c72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_SetPinValue(EN,LOW);
    1c74:	8c e0       	ldi	r24, 0x0C	; 12
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	8f a3       	std	Y+39, r24	; 0x27
    1c86:	98 a7       	std	Y+40, r25	; 0x28
    1c88:	a9 a7       	std	Y+41, r26	; 0x29
    1c8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c90:	89 a5       	ldd	r24, Y+41	; 0x29
    1c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	55 e4       	ldi	r21, 0x45	; 69
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8b a3       	std	Y+35, r24	; 0x23
    1ca6:	9c a3       	std	Y+36, r25	; 0x24
    1ca8:	ad a3       	std	Y+37, r26	; 0x25
    1caa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <H_Lcd_WriteCommand+0x180>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <H_Lcd_WriteCommand+0x1fe>
	else if (__tmp > 65535)
    1cce:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <H_Lcd_WriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cea:	89 a5       	ldd	r24, Y+41	; 0x29
    1cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <H_Lcd_WriteCommand+0x1e0>
    1d10:	80 e9       	ldi	r24, 0x90	; 144
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	98 a3       	std	Y+32, r25	; 0x20
    1d16:	8f 8f       	std	Y+31, r24	; 0x1f
    1d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d1a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <H_Lcd_WriteCommand+0x1ce>
    1d20:	98 a3       	std	Y+32, r25	; 0x20
    1d22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	89 a1       	ldd	r24, Y+33	; 0x21
    1d26:	9a a1       	ldd	r25, Y+34	; 0x22
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d30:	9a a1       	ldd	r25, Y+34	; 0x22
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <H_Lcd_WriteCommand+0x1c2>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <H_Lcd_WriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9a a3       	std	Y+34, r25	; 0x22
    1d4a:	89 a3       	std	Y+33, r24	; 0x21
    1d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d50:	9e 8f       	std	Y+30, r25	; 0x1e
    1d52:	8d 8f       	std	Y+29, r24	; 0x1d
    1d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <H_Lcd_WriteCommand+0x20a>
    1d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_Data_Port = (((Local_u8_Command & 0x0F)+0x08) &0x17) | (Lcd_Data_Port &0xE8);
    1d60:	a8 e3       	ldi	r26, 0x38	; 56
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	89 ad       	ldd	r24, Y+57	; 0x39
    1d66:	8f 70       	andi	r24, 0x0F	; 15
    1d68:	88 5f       	subi	r24, 0xF8	; 248
    1d6a:	98 2f       	mov	r25, r24
    1d6c:	97 71       	andi	r25, 0x17	; 23
    1d6e:	e8 e3       	ldi	r30, 0x38	; 56
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	88 7e       	andi	r24, 0xE8	; 232
    1d76:	89 2b       	or	r24, r25
    1d78:	8c 93       	st	X, r24
	M_Dio_SetPinValue(EN,HIGH);
    1d7a:	8c e0       	ldi	r24, 0x0C	; 12
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e8       	ldi	r26, 0x80	; 128
    1d88:	bf e3       	ldi	r27, 0x3F	; 63
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	55 e4       	ldi	r21, 0x45	; 69
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8d 8b       	std	Y+21, r24	; 0x15
    1dac:	9e 8b       	std	Y+22, r25	; 0x16
    1dae:	af 8b       	std	Y+23, r26	; 0x17
    1db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <H_Lcd_WriteCommand+0x286>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <H_Lcd_WriteCommand+0x304>
	else if (__tmp > 65535)
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <H_Lcd_WriteCommand+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	69 8d       	ldd	r22, Y+25	; 0x19
    1dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <H_Lcd_WriteCommand+0x2e6>
    1e16:	80 e9       	ldi	r24, 0x90	; 144
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
    1e1e:	89 89       	ldd	r24, Y+17	; 0x11
    1e20:	9a 89       	ldd	r25, Y+18	; 0x12
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <H_Lcd_WriteCommand+0x2d4>
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <H_Lcd_WriteCommand+0x2c8>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <H_Lcd_WriteCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5c:	98 89       	ldd	r25, Y+16	; 0x10
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <H_Lcd_WriteCommand+0x310>
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_SetPinValue(EN,LOW);
    1e66:	8c e0       	ldi	r24, 0x0C	; 12
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 ea       	ldi	r26, 0xA0	; 160
    1e74:	b0 e4       	ldi	r27, 0x40	; 64
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	55 e4       	ldi	r21, 0x45	; 69
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <H_Lcd_WriteCommand+0x372>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <H_Lcd_WriteCommand+0x3f0>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <H_Lcd_WriteCommand+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <H_Lcd_WriteCommand+0x3d2>
    1f02:	80 e9       	ldi	r24, 0x90	; 144
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <H_Lcd_WriteCommand+0x3c0>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <H_Lcd_WriteCommand+0x3b4>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <H_Lcd_WriteCommand+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <H_Lcd_WriteCommand+0x3fc>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1f52:	e9 96       	adiw	r28, 0x39	; 57
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <H_Lcd_Init>:
void H_Lcd_Init(void)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61

	M_Dio_SetPinDirection(RS,OUTPUT);
    1f78:	8d e0       	ldi	r24, 0x0D	; 13
    1f7a:	61 e0       	ldi	r22, 0x01	; 1
    1f7c:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(EN,OUTPUT);
    1f80:	8c e0       	ldi	r24, 0x0C	; 12
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(D4,OUTPUT);
    1f88:	84 e1       	ldi	r24, 0x14	; 20
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(D5,OUTPUT);
    1f90:	85 e1       	ldi	r24, 0x15	; 21
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(D6,OUTPUT);
    1f98:	86 e1       	ldi	r24, 0x16	; 22
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(D7,OUTPUT);
    1fa0:	88 e1       	ldi	r24, 0x18	; 24
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	aa e7       	ldi	r26, 0x7A	; 122
    1fae:	b4 e4       	ldi	r27, 0x44	; 68
    1fb0:	8b 87       	std	Y+11, r24	; 0x0b
    1fb2:	9c 87       	std	Y+12, r25	; 0x0c
    1fb4:	ad 87       	std	Y+13, r26	; 0x0d
    1fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a e7       	ldi	r20, 0x7A	; 122
    1fc6:	55 e4       	ldi	r21, 0x45	; 69
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8f 83       	std	Y+7, r24	; 0x07
    1fd2:	98 87       	std	Y+8, r25	; 0x08
    1fd4:	a9 87       	std	Y+9, r26	; 0x09
    1fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <H_Lcd_Init+0x96>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <H_Lcd_Init+0x114>
	else if (__tmp > 65535)
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <H_Lcd_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	6b 85       	ldd	r22, Y+11	; 0x0b
    2014:	7c 85       	ldd	r23, Y+12	; 0x0c
    2016:	8d 85       	ldd	r24, Y+13	; 0x0d
    2018:	9e 85       	ldd	r25, Y+14	; 0x0e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	0f c0       	rjmp	.+30     	; 0x205a <H_Lcd_Init+0xf6>
    203c:	80 e9       	ldi	r24, 0x90	; 144
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <H_Lcd_Init+0xe4>
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <H_Lcd_Init+0xd8>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <H_Lcd_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <H_Lcd_Init+0x120>
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	H_Lcd_WriteCommand(Lcd_4_Bit_Mode_1);
    208c:	83 e3       	ldi	r24, 0x33	; 51
    208e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(Lcd_4_Bit_Mode_2);
    2092:	82 e3       	ldi	r24, 0x32	; 50
    2094:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(Lcd_4_Bit_Mode_3);
    2098:	88 e2       	ldi	r24, 0x28	; 40
    209a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(Lcd_Display_On_Cursor_off);
    209e:	8c e0       	ldi	r24, 0x0C	; 12
    20a0:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(Lcd_Clear);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(Lcd_Return_Home);
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
}
    20b0:	2e 96       	adiw	r28, 0x0e	; 14
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <H_Lcd_WriteCharacter>:

void H_Lcd_WriteCharacter(uint8_t Local_u8_Character)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	e9 97       	sbiw	r28, 0x39	; 57
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	89 af       	std	Y+57, r24	; 0x39
	M_Dio_SetPinValue(RS,HIGH);
    20d8:	8d e0       	ldi	r24, 0x0D	; 13
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	Lcd_Data_Port =(((Local_u8_Character >>4)+0x08) & 0x17) | (Lcd_Data_Port &0xE8);
    20e0:	a8 e3       	ldi	r26, 0x38	; 56
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	89 ad       	ldd	r24, Y+57	; 0x39
    20e6:	82 95       	swap	r24
    20e8:	8f 70       	andi	r24, 0x0F	; 15
    20ea:	88 5f       	subi	r24, 0xF8	; 248
    20ec:	98 2f       	mov	r25, r24
    20ee:	97 71       	andi	r25, 0x17	; 23
    20f0:	e8 e3       	ldi	r30, 0x38	; 56
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	88 7e       	andi	r24, 0xE8	; 232
    20f8:	89 2b       	or	r24, r25
    20fa:	8c 93       	st	X, r24
	M_Dio_SetPinValue(EN,HIGH);
    20fc:	8c e0       	ldi	r24, 0x0C	; 12
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	8d ab       	std	Y+53, r24	; 0x35
    210e:	9e ab       	std	Y+54, r25	; 0x36
    2110:	af ab       	std	Y+55, r26	; 0x37
    2112:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	6d a9       	ldd	r22, Y+53	; 0x35
    2116:	7e a9       	ldd	r23, Y+54	; 0x36
    2118:	8f a9       	ldd	r24, Y+55	; 0x37
    211a:	98 ad       	ldd	r25, Y+56	; 0x38
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	55 e4       	ldi	r21, 0x45	; 69
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	89 ab       	std	Y+49, r24	; 0x31
    212e:	9a ab       	std	Y+50, r25	; 0x32
    2130:	ab ab       	std	Y+51, r26	; 0x33
    2132:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2134:	69 a9       	ldd	r22, Y+49	; 0x31
    2136:	7a a9       	ldd	r23, Y+50	; 0x32
    2138:	8b a9       	ldd	r24, Y+51	; 0x33
    213a:	9c a9       	ldd	r25, Y+52	; 0x34
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2148:	88 23       	and	r24, r24
    214a:	2c f4       	brge	.+10     	; 0x2156 <H_Lcd_WriteCharacter+0x94>
		__ticks = 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	98 ab       	std	Y+48, r25	; 0x30
    2152:	8f a7       	std	Y+47, r24	; 0x2f
    2154:	3f c0       	rjmp	.+126    	; 0x21d4 <H_Lcd_WriteCharacter+0x112>
	else if (__tmp > 65535)
    2156:	69 a9       	ldd	r22, Y+49	; 0x31
    2158:	7a a9       	ldd	r23, Y+50	; 0x32
    215a:	8b a9       	ldd	r24, Y+51	; 0x33
    215c:	9c a9       	ldd	r25, Y+52	; 0x34
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	4c f5       	brge	.+82     	; 0x21c0 <H_Lcd_WriteCharacter+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216e:	6d a9       	ldd	r22, Y+53	; 0x35
    2170:	7e a9       	ldd	r23, Y+54	; 0x36
    2172:	8f a9       	ldd	r24, Y+55	; 0x37
    2174:	98 ad       	ldd	r25, Y+56	; 0x38
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e2       	ldi	r20, 0x20	; 32
    217c:	51 e4       	ldi	r21, 0x41	; 65
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	98 ab       	std	Y+48, r25	; 0x30
    2194:	8f a7       	std	Y+47, r24	; 0x2f
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <H_Lcd_WriteCharacter+0xf4>
    2198:	80 e9       	ldi	r24, 0x90	; 144
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	9e a7       	std	Y+46, r25	; 0x2e
    219e:	8d a7       	std	Y+45, r24	; 0x2d
    21a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <H_Lcd_WriteCharacter+0xe2>
    21a8:	9e a7       	std	Y+46, r25	; 0x2e
    21aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ae:	98 a9       	ldd	r25, Y+48	; 0x30
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	98 ab       	std	Y+48, r25	; 0x30
    21b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b8:	98 a9       	ldd	r25, Y+48	; 0x30
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	69 f7       	brne	.-38     	; 0x2198 <H_Lcd_WriteCharacter+0xd6>
    21be:	14 c0       	rjmp	.+40     	; 0x21e8 <H_Lcd_WriteCharacter+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	69 a9       	ldd	r22, Y+49	; 0x31
    21c2:	7a a9       	ldd	r23, Y+50	; 0x32
    21c4:	8b a9       	ldd	r24, Y+51	; 0x33
    21c6:	9c a9       	ldd	r25, Y+52	; 0x34
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
    21d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d6:	98 a9       	ldd	r25, Y+48	; 0x30
    21d8:	9c a7       	std	Y+44, r25	; 0x2c
    21da:	8b a7       	std	Y+43, r24	; 0x2b
    21dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21de:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <H_Lcd_WriteCharacter+0x11e>
    21e4:	9c a7       	std	Y+44, r25	; 0x2c
    21e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_SetPinValue(EN,LOW);
    21e8:	8c e0       	ldi	r24, 0x0C	; 12
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e8       	ldi	r26, 0x80	; 128
    21f6:	bf e3       	ldi	r27, 0x3F	; 63
    21f8:	8f a3       	std	Y+39, r24	; 0x27
    21fa:	98 a7       	std	Y+40, r25	; 0x28
    21fc:	a9 a7       	std	Y+41, r26	; 0x29
    21fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6f a1       	ldd	r22, Y+39	; 0x27
    2202:	78 a5       	ldd	r23, Y+40	; 0x28
    2204:	89 a5       	ldd	r24, Y+41	; 0x29
    2206:	9a a5       	ldd	r25, Y+42	; 0x2a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a e7       	ldi	r20, 0x7A	; 122
    220e:	55 e4       	ldi	r21, 0x45	; 69
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8b a3       	std	Y+35, r24	; 0x23
    221a:	9c a3       	std	Y+36, r25	; 0x24
    221c:	ad a3       	std	Y+37, r26	; 0x25
    221e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2220:	6b a1       	ldd	r22, Y+35	; 0x23
    2222:	7c a1       	ldd	r23, Y+36	; 0x24
    2224:	8d a1       	ldd	r24, Y+37	; 0x25
    2226:	9e a1       	ldd	r25, Y+38	; 0x26
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <H_Lcd_WriteCharacter+0x180>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <H_Lcd_WriteCharacter+0x1fe>
	else if (__tmp > 65535)
    2242:	6b a1       	ldd	r22, Y+35	; 0x23
    2244:	7c a1       	ldd	r23, Y+36	; 0x24
    2246:	8d a1       	ldd	r24, Y+37	; 0x25
    2248:	9e a1       	ldd	r25, Y+38	; 0x26
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <H_Lcd_WriteCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6f a1       	ldd	r22, Y+39	; 0x27
    225c:	78 a5       	ldd	r23, Y+40	; 0x28
    225e:	89 a5       	ldd	r24, Y+41	; 0x29
    2260:	9a a5       	ldd	r25, Y+42	; 0x2a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <H_Lcd_WriteCharacter+0x1e0>
    2284:	80 e9       	ldi	r24, 0x90	; 144
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	98 a3       	std	Y+32, r25	; 0x20
    228a:	8f 8f       	std	Y+31, r24	; 0x1f
    228c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    228e:	98 a1       	ldd	r25, Y+32	; 0x20
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <H_Lcd_WriteCharacter+0x1ce>
    2294:	98 a3       	std	Y+32, r25	; 0x20
    2296:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9a a3       	std	Y+34, r25	; 0x22
    22a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	89 a1       	ldd	r24, Y+33	; 0x21
    22a4:	9a a1       	ldd	r25, Y+34	; 0x22
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <H_Lcd_WriteCharacter+0x1c2>
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <H_Lcd_WriteCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	6b a1       	ldd	r22, Y+35	; 0x23
    22ae:	7c a1       	ldd	r23, Y+36	; 0x24
    22b0:	8d a1       	ldd	r24, Y+37	; 0x25
    22b2:	9e a1       	ldd	r25, Y+38	; 0x26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	9e 8f       	std	Y+30, r25	; 0x1e
    22c6:	8d 8f       	std	Y+29, r24	; 0x1d
    22c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <H_Lcd_WriteCharacter+0x20a>
    22d0:	9e 8f       	std	Y+30, r25	; 0x1e
    22d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_SetPinValue(RS,HIGH);
    22d4:	8d e0       	ldi	r24, 0x0D	; 13
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	Lcd_Data_Port =(((Local_u8_Character & 0x0F)+0x08) &0x17) | (Lcd_Data_Port &0xE8);
    22dc:	a8 e3       	ldi	r26, 0x38	; 56
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	89 ad       	ldd	r24, Y+57	; 0x39
    22e2:	8f 70       	andi	r24, 0x0F	; 15
    22e4:	88 5f       	subi	r24, 0xF8	; 248
    22e6:	98 2f       	mov	r25, r24
    22e8:	97 71       	andi	r25, 0x17	; 23
    22ea:	e8 e3       	ldi	r30, 0x38	; 56
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	88 7e       	andi	r24, 0xE8	; 232
    22f2:	89 2b       	or	r24, r25
    22f4:	8c 93       	st	X, r24
	M_Dio_SetPinValue(EN,HIGH);
    22f6:	8c e0       	ldi	r24, 0x0C	; 12
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e8       	ldi	r26, 0x80	; 128
    2304:	bf e3       	ldi	r27, 0x3F	; 63
    2306:	89 8f       	std	Y+25, r24	; 0x19
    2308:	9a 8f       	std	Y+26, r25	; 0x1a
    230a:	ab 8f       	std	Y+27, r26	; 0x1b
    230c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	69 8d       	ldd	r22, Y+25	; 0x19
    2310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a e7       	ldi	r20, 0x7A	; 122
    231c:	55 e4       	ldi	r21, 0x45	; 69
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	8d 8b       	std	Y+21, r24	; 0x15
    2328:	9e 8b       	std	Y+22, r25	; 0x16
    232a:	af 8b       	std	Y+23, r26	; 0x17
    232c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232e:	6d 89       	ldd	r22, Y+21	; 0x15
    2330:	7e 89       	ldd	r23, Y+22	; 0x16
    2332:	8f 89       	ldd	r24, Y+23	; 0x17
    2334:	98 8d       	ldd	r25, Y+24	; 0x18
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	2c f4       	brge	.+10     	; 0x2350 <H_Lcd_WriteCharacter+0x28e>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9c 8b       	std	Y+20, r25	; 0x14
    234c:	8b 8b       	std	Y+19, r24	; 0x13
    234e:	3f c0       	rjmp	.+126    	; 0x23ce <H_Lcd_WriteCharacter+0x30c>
	else if (__tmp > 65535)
    2350:	6d 89       	ldd	r22, Y+21	; 0x15
    2352:	7e 89       	ldd	r23, Y+22	; 0x16
    2354:	8f 89       	ldd	r24, Y+23	; 0x17
    2356:	98 8d       	ldd	r25, Y+24	; 0x18
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	3f ef       	ldi	r19, 0xFF	; 255
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	57 e4       	ldi	r21, 0x47	; 71
    2360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2364:	18 16       	cp	r1, r24
    2366:	4c f5       	brge	.+82     	; 0x23ba <H_Lcd_WriteCharacter+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2368:	69 8d       	ldd	r22, Y+25	; 0x19
    236a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e2       	ldi	r20, 0x20	; 32
    2376:	51 e4       	ldi	r21, 0x41	; 65
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <H_Lcd_WriteCharacter+0x2ee>
    2392:	80 e9       	ldi	r24, 0x90	; 144
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	9a 8b       	std	Y+18, r25	; 0x12
    2398:	89 8b       	std	Y+17, r24	; 0x11
    239a:	89 89       	ldd	r24, Y+17	; 0x11
    239c:	9a 89       	ldd	r25, Y+18	; 0x12
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <H_Lcd_WriteCharacter+0x2dc>
    23a2:	9a 8b       	std	Y+18, r25	; 0x12
    23a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a6:	8b 89       	ldd	r24, Y+19	; 0x13
    23a8:	9c 89       	ldd	r25, Y+20	; 0x14
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	8b 89       	ldd	r24, Y+19	; 0x13
    23b2:	9c 89       	ldd	r25, Y+20	; 0x14
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	69 f7       	brne	.-38     	; 0x2392 <H_Lcd_WriteCharacter+0x2d0>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <H_Lcd_WriteCharacter+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ba:	6d 89       	ldd	r22, Y+21	; 0x15
    23bc:	7e 89       	ldd	r23, Y+22	; 0x16
    23be:	8f 89       	ldd	r24, Y+23	; 0x17
    23c0:	98 8d       	ldd	r25, Y+24	; 0x18
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9c 8b       	std	Y+20, r25	; 0x14
    23cc:	8b 8b       	std	Y+19, r24	; 0x13
    23ce:	8b 89       	ldd	r24, Y+19	; 0x13
    23d0:	9c 89       	ldd	r25, Y+20	; 0x14
    23d2:	98 8b       	std	Y+16, r25	; 0x10
    23d4:	8f 87       	std	Y+15, r24	; 0x0f
    23d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d8:	98 89       	ldd	r25, Y+16	; 0x10
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <H_Lcd_WriteCharacter+0x318>
    23de:	98 8b       	std	Y+16, r25	; 0x10
    23e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_SetPinValue(EN,LOW);
    23e2:	8c e0       	ldi	r24, 0x0C	; 12
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 ea       	ldi	r26, 0xA0	; 160
    23f0:	b0 e4       	ldi	r27, 0x40	; 64
    23f2:	8b 87       	std	Y+11, r24	; 0x0b
    23f4:	9c 87       	std	Y+12, r25	; 0x0c
    23f6:	ad 87       	std	Y+13, r26	; 0x0d
    23f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2400:	9e 85       	ldd	r25, Y+14	; 0x0e
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a e7       	ldi	r20, 0x7A	; 122
    2408:	55 e4       	ldi	r21, 0x45	; 69
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8f 83       	std	Y+7, r24	; 0x07
    2414:	98 87       	std	Y+8, r25	; 0x08
    2416:	a9 87       	std	Y+9, r26	; 0x09
    2418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <H_Lcd_WriteCharacter+0x37a>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <H_Lcd_WriteCharacter+0x3f8>
	else if (__tmp > 65535)
    243c:	6f 81       	ldd	r22, Y+7	; 0x07
    243e:	78 85       	ldd	r23, Y+8	; 0x08
    2440:	89 85       	ldd	r24, Y+9	; 0x09
    2442:	9a 85       	ldd	r25, Y+10	; 0x0a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <H_Lcd_WriteCharacter+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
    247c:	0f c0       	rjmp	.+30     	; 0x249c <H_Lcd_WriteCharacter+0x3da>
    247e:	80 e9       	ldi	r24, 0x90	; 144
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <H_Lcd_WriteCharacter+0x3c8>
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <H_Lcd_WriteCharacter+0x3bc>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <H_Lcd_WriteCharacter+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <H_Lcd_WriteCharacter+0x404>
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    24ce:	e9 96       	adiw	r28, 0x39	; 57
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <H_Lcd_WriteString>:

void H_Lcd_WriteString(uint8_t* Local_u8_Ptr)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <H_Lcd_WriteString+0x6>
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	9b 83       	std	Y+3, r25	; 0x03
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_Counter=0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
    24f2:	0e c0       	rjmp	.+28     	; 0x2510 <H_Lcd_WriteString+0x30>
	while(Local_u8_Ptr[Local_u8_Counter] !=Null_)
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	fc 01       	movw	r30, r24
    2500:	e2 0f       	add	r30, r18
    2502:	f3 1f       	adc	r31, r19
    2504:	80 81       	ld	r24, Z
    2506:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>
		Local_u8_Counter ++;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	89 83       	std	Y+1, r24	; 0x01
}

void H_Lcd_WriteString(uint8_t* Local_u8_Ptr)
{
	uint8_t Local_u8_Counter=0;
	while(Local_u8_Ptr[Local_u8_Counter] !=Null_)
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	80 81       	ld	r24, Z
    2522:	88 23       	and	r24, r24
    2524:	39 f7       	brne	.-50     	; 0x24f4 <H_Lcd_WriteString+0x14>
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
		Local_u8_Counter ++;
	}
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <H_Lcd_Clr>:
void H_Lcd_Clr(void)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_WriteCommand(Lcd_Clear);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
}
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <H_Lcd_WriteNumber>:
void H_Lcd_WriteNumber(sint32_t Local_s32_Number)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	60 97       	sbiw	r28, 0x10	; 16
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	6d 87       	std	Y+13, r22	; 0x0d
    255c:	7e 87       	std	Y+14, r23	; 0x0e
    255e:	8f 87       	std	Y+15, r24	; 0x0f
    2560:	98 8b       	std	Y+16, r25	; 0x10
	uint8_t Local_u8_Arr [10] = {0};
    2562:	8a e0       	ldi	r24, 0x0A	; 10
    2564:	fe 01       	movw	r30, r28
    2566:	33 96       	adiw	r30, 0x03	; 3
    2568:	df 01       	movw	r26, r30
    256a:	98 2f       	mov	r25, r24
    256c:	1d 92       	st	X+, r1
    256e:	9a 95       	dec	r25
    2570:	e9 f7       	brne	.-6      	; 0x256c <H_Lcd_WriteNumber+0x26>
	sint8_t Local_s8_Counter  = 0;
    2572:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8_Digit    = 0;
    2574:	19 82       	std	Y+1, r1	; 0x01
	if(Local_s32_Number == 0)
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	af 85       	ldd	r26, Y+15	; 0x0f
    257c:	b8 89       	ldd	r27, Y+16	; 0x10
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	a1 05       	cpc	r26, r1
    2582:	b1 05       	cpc	r27, r1
    2584:	21 f4       	brne	.+8      	; 0x258e <H_Lcd_WriteNumber+0x48>
	{
		H_Lcd_WriteCharacter('0');
    2586:	80 e3       	ldi	r24, 0x30	; 48
    2588:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>
    258c:	6a c0       	rjmp	.+212    	; 0x2662 <H_Lcd_WriteNumber+0x11c>
	}
	else
	{
		if(Local_s32_Number < 0)
    258e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2590:	9e 85       	ldd	r25, Y+14	; 0x0e
    2592:	af 85       	ldd	r26, Y+15	; 0x0f
    2594:	b8 89       	ldd	r27, Y+16	; 0x10
    2596:	bb 23       	and	r27, r27
    2598:	0c f0       	brlt	.+2      	; 0x259c <H_Lcd_WriteNumber+0x56>
    259a:	43 c0       	rjmp	.+134    	; 0x2622 <H_Lcd_WriteNumber+0xdc>
		{
			H_Lcd_WriteCharacter('-');
    259c:	8d e2       	ldi	r24, 0x2D	; 45
    259e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>
			Local_s32_Number = Local_s32_Number * -1;
    25a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a6:	af 85       	ldd	r26, Y+15	; 0x0f
    25a8:	b8 89       	ldd	r27, Y+16	; 0x10
    25aa:	b0 95       	com	r27
    25ac:	a0 95       	com	r26
    25ae:	90 95       	com	r25
    25b0:	81 95       	neg	r24
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	af 4f       	sbci	r26, 0xFF	; 255
    25b6:	bf 4f       	sbci	r27, 0xFF	; 255
    25b8:	8d 87       	std	Y+13, r24	; 0x0d
    25ba:	9e 87       	std	Y+14, r25	; 0x0e
    25bc:	af 87       	std	Y+15, r26	; 0x0f
    25be:	b8 8b       	std	Y+16, r27	; 0x10
    25c0:	30 c0       	rjmp	.+96     	; 0x2622 <H_Lcd_WriteNumber+0xdc>
		}
		while(Local_s32_Number != 0)
		{
			Local_u8_Digit = Local_s32_Number % 10;
    25c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c6:	af 85       	ldd	r26, Y+15	; 0x0f
    25c8:	b8 89       	ldd	r27, Y+16	; 0x10
    25ca:	2a e0       	ldi	r18, 0x0A	; 10
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__divmodsi4>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	89 83       	std	Y+1, r24	; 0x01
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	28 2f       	mov	r18, r24
    25e4:	33 27       	eor	r19, r19
    25e6:	27 fd       	sbrc	r18, 7
    25e8:	30 95       	com	r19
    25ea:	ce 01       	movw	r24, r28
    25ec:	03 96       	adiw	r24, 0x03	; 3
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	80 83       	st	Z, r24
			Local_s8_Counter++;
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	8a 83       	std	Y+2, r24	; 0x02
			Local_s32_Number = Local_s32_Number / 10;
    25fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2600:	9e 85       	ldd	r25, Y+14	; 0x0e
    2602:	af 85       	ldd	r26, Y+15	; 0x0f
    2604:	b8 89       	ldd	r27, Y+16	; 0x10
    2606:	2a e0       	ldi	r18, 0x0A	; 10
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__divmodsi4>
    2616:	da 01       	movw	r26, r20
    2618:	c9 01       	movw	r24, r18
    261a:	8d 87       	std	Y+13, r24	; 0x0d
    261c:	9e 87       	std	Y+14, r25	; 0x0e
    261e:	af 87       	std	Y+15, r26	; 0x0f
    2620:	b8 8b       	std	Y+16, r27	; 0x10
		if(Local_s32_Number < 0)
		{
			H_Lcd_WriteCharacter('-');
			Local_s32_Number = Local_s32_Number * -1;
		}
		while(Local_s32_Number != 0)
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	af 85       	ldd	r26, Y+15	; 0x0f
    2628:	b8 89       	ldd	r27, Y+16	; 0x10
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	a1 05       	cpc	r26, r1
    262e:	b1 05       	cpc	r27, r1
    2630:	41 f6       	brne	.-112    	; 0x25c2 <H_Lcd_WriteNumber+0x7c>
			Local_u8_Digit = Local_s32_Number % 10;
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
		}
		Local_s8_Counter--;
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	81 50       	subi	r24, 0x01	; 1
    2636:	8a 83       	std	Y+2, r24	; 0x02
    2638:	11 c0       	rjmp	.+34     	; 0x265c <H_Lcd_WriteNumber+0x116>
		while(Local_s8_Counter >= 0)
		{
			H_Lcd_WriteCharacter(Local_u8_Arr[Local_s8_Counter] + 48);
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	28 2f       	mov	r18, r24
    263e:	33 27       	eor	r19, r19
    2640:	27 fd       	sbrc	r18, 7
    2642:	30 95       	com	r19
    2644:	ce 01       	movw	r24, r28
    2646:	03 96       	adiw	r24, 0x03	; 3
    2648:	fc 01       	movw	r30, r24
    264a:	e2 0f       	add	r30, r18
    264c:	f3 1f       	adc	r31, r19
    264e:	80 81       	ld	r24, Z
    2650:	80 5d       	subi	r24, 0xD0	; 208
    2652:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>
			Local_s8_Counter--;
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	81 50       	subi	r24, 0x01	; 1
    265a:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8_Arr[Local_s8_Counter] = Local_u8_Digit;
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
		}
		Local_s8_Counter--;
		while(Local_s8_Counter >= 0)
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	88 23       	and	r24, r24
    2660:	64 f7       	brge	.-40     	; 0x263a <H_Lcd_WriteNumber+0xf4>
		{
			H_Lcd_WriteCharacter(Local_u8_Arr[Local_s8_Counter] + 48);
			Local_s8_Counter--;
		}
	}
}
    2662:	60 96       	adiw	r28, 0x10	; 16
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <H_Lcd_GoTO>:
void H_Lcd_GoTO(uint8_t Local_u8_Row,uint8_t Local_u8_Col)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	27 97       	sbiw	r28, 0x07	; 7
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	8e 83       	std	Y+6, r24	; 0x06
    268a:	6f 83       	std	Y+7, r22	; 0x07
	  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};  // Row offset values for a 4x20 LCD
    268c:	1a 82       	std	Y+2, r1	; 0x02
    268e:	80 e4       	ldi	r24, 0x40	; 64
    2690:	8b 83       	std	Y+3, r24	; 0x03
    2692:	84 e1       	ldi	r24, 0x14	; 20
    2694:	8c 83       	std	Y+4, r24	; 0x04
    2696:	84 e5       	ldi	r24, 0x54	; 84
    2698:	8d 83       	std	Y+5, r24	; 0x05

	    // Calculate the offset for the specified row
	    uint8_t offset = Local_u8_Col + row_offsets[Local_u8_Row];
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	ce 01       	movw	r24, r28
    26a2:	02 96       	adiw	r24, 0x02	; 2
    26a4:	fc 01       	movw	r30, r24
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	90 81       	ld	r25, Z
    26ac:	8f 81       	ldd	r24, Y+7	; 0x07
    26ae:	89 0f       	add	r24, r25
    26b0:	89 83       	std	Y+1, r24	; 0x01

	    // Set the DDRAM address to move the cursor
	    H_Lcd_WriteCommand(0x80 | offset);
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 68       	ori	r24, 0x80	; 128
    26b6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
}
    26ba:	27 96       	adiw	r28, 0x07	; 7
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <H_KeyPad_Init>:
 *      Author: Mohamed Safwat
 */
#include "KeyPad.h"

void H_KeyPad_Init(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
	//set Rows as Output
	M_Dio_SetPinDirection(Keypad_Row1,OUTPUT);
    26d4:	83 e2       	ldi	r24, 0x23	; 35
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Keypad_Row2,OUTPUT);
    26dc:	82 e2       	ldi	r24, 0x22	; 34
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Keypad_Row3,OUTPUT);
    26e4:	81 e2       	ldi	r24, 0x21	; 33
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Keypad_Row4,OUTPUT);
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	61 e0       	ldi	r22, 0x01	; 1
    26f0:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
    //set Columns as input
	M_Dio_SetPinDirection(Keypad_Col1,INPUT);
    26f4:	8f e2       	ldi	r24, 0x2F	; 47
    26f6:	62 e0       	ldi	r22, 0x02	; 2
    26f8:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Keypad_Col2,INPUT);
    26fc:	8e e2       	ldi	r24, 0x2E	; 46
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Keypad_Col3,INPUT);
    2704:	8d e2       	ldi	r24, 0x2D	; 45
    2706:	62 e0       	ldi	r22, 0x02	; 2
    2708:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>
	M_Dio_SetPinDirection(Keypad_Col4,INPUT);
    270c:	8b e2       	ldi	r24, 0x2B	; 43
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	0e 94 de 06 	call	0xdbc	; 0xdbc <M_Dio_SetPinDirection>

	//set High level voltage on ROWs
	M_Dio_SetPinValue(Keypad_Row1,HIGH);
    2714:	83 e2       	ldi	r24, 0x23	; 35
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	M_Dio_SetPinValue(Keypad_Row2,HIGH);
    271c:	82 e2       	ldi	r24, 0x22	; 34
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	M_Dio_SetPinValue(Keypad_Row3,HIGH);
    2724:	81 e2       	ldi	r24, 0x21	; 33
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	M_Dio_SetPinValue(Keypad_Row4,HIGH);
    272c:	80 e2       	ldi	r24, 0x20	; 32
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <H_KeyPad_Read>:

uint8_t H_KeyPad_Read(void)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	ac 97       	sbiw	r28, 0x2c	; 44
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	#elif KEYPAD_MODE       ==      TYPE_2
	uint8_t Local_u8_Arr[4][5] =
	{{ '7' , '8' , '9' ,'0', '/' },
	{ '4' , '5' , '6' ,'0', '*' },
	{ '1' , '2' , '3' ,'0', '-' },
	{ 'C' , '0' , '=' , '0','+' }};
    274e:	ae 01       	movw	r20, r28
    2750:	4c 5e       	subi	r20, 0xEC	; 236
    2752:	5f 4f       	sbci	r21, 0xFF	; 255
    2754:	59 a7       	std	Y+41, r21	; 0x29
    2756:	48 a7       	std	Y+40, r20	; 0x28
    2758:	8c e9       	ldi	r24, 0x9C	; 156
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9b a7       	std	Y+43, r25	; 0x2b
    275e:	8a a7       	std	Y+42, r24	; 0x2a
    2760:	94 e1       	ldi	r25, 0x14	; 20
    2762:	9c a7       	std	Y+44, r25	; 0x2c
    2764:	ea a5       	ldd	r30, Y+42	; 0x2a
    2766:	fb a5       	ldd	r31, Y+43	; 0x2b
    2768:	00 80       	ld	r0, Z
    276a:	4a a5       	ldd	r20, Y+42	; 0x2a
    276c:	5b a5       	ldd	r21, Y+43	; 0x2b
    276e:	4f 5f       	subi	r20, 0xFF	; 255
    2770:	5f 4f       	sbci	r21, 0xFF	; 255
    2772:	5b a7       	std	Y+43, r21	; 0x2b
    2774:	4a a7       	std	Y+42, r20	; 0x2a
    2776:	e8 a5       	ldd	r30, Y+40	; 0x28
    2778:	f9 a5       	ldd	r31, Y+41	; 0x29
    277a:	00 82       	st	Z, r0
    277c:	48 a5       	ldd	r20, Y+40	; 0x28
    277e:	59 a5       	ldd	r21, Y+41	; 0x29
    2780:	4f 5f       	subi	r20, 0xFF	; 255
    2782:	5f 4f       	sbci	r21, 0xFF	; 255
    2784:	59 a7       	std	Y+41, r21	; 0x29
    2786:	48 a7       	std	Y+40, r20	; 0x28
    2788:	5c a5       	ldd	r21, Y+44	; 0x2c
    278a:	51 50       	subi	r21, 0x01	; 1
    278c:	5c a7       	std	Y+44, r21	; 0x2c
    278e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2790:	88 23       	and	r24, r24
    2792:	41 f7       	brne	.-48     	; 0x2764 <H_KeyPad_Read+0x2a>
	#endif
	uint8_t Local_u8_Reading = KEYPAD_RELEASED;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t Local_u8_Value   = 0;
    2798:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t Local_u8_Row = 0;
    279a:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t Local_u8_Col = 0;
    279c:	18 8a       	std	Y+16, r1	; 0x10
	uint8_t Col=0;
    279e:	1f 86       	std	Y+15, r1	; 0x0f
	for (Local_u8_Row=Keypad_Row1;Local_u8_Row>=Keypad_Row4;Local_u8_Row--)
    27a0:	83 e2       	ldi	r24, 0x23	; 35
    27a2:	89 8b       	std	Y+17, r24	; 0x11
    27a4:	c1 c0       	rjmp	.+386    	; 0x2928 <H_KeyPad_Read+0x1ee>
	{
		M_Dio_SetPinValue(Local_u8_Row,LOW);
    27a6:	89 89       	ldd	r24, Y+17	; 0x11
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
		for (Local_u8_Col=Keypad_Col1;Local_u8_Col >= Keypad_Col4;Local_u8_Col--)
    27ae:	8f e2       	ldi	r24, 0x2F	; 47
    27b0:	88 8b       	std	Y+16, r24	; 0x10
    27b2:	af c0       	rjmp	.+350    	; 0x2912 <H_KeyPad_Read+0x1d8>
		{
			Col=Keypad_Col1 - Local_u8_Col;
    27b4:	9f e2       	ldi	r25, 0x2F	; 47
    27b6:	88 89       	ldd	r24, Y+16	; 0x10
    27b8:	e9 2f       	mov	r30, r25
    27ba:	e8 1b       	sub	r30, r24
    27bc:	8e 2f       	mov	r24, r30
    27be:	8f 87       	std	Y+15, r24	; 0x0f

			if(Local_u8_Col == PD4_Pin)
    27c0:	88 89       	ldd	r24, Y+16	; 0x10
    27c2:	8c 32       	cpi	r24, 0x2C	; 44
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <H_KeyPad_Read+0x8e>
    27c6:	a2 c0       	rjmp	.+324    	; 0x290c <H_KeyPad_Read+0x1d2>
			{
              continue;
			}
			else
			{
			Local_u8_Reading = M_Dio_getPinValue(Local_u8_Col);
    27c8:	88 89       	ldd	r24, Y+16	; 0x10
    27ca:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <M_Dio_getPinValue>
    27ce:	8b 8b       	std	Y+19, r24	; 0x13
			if(Local_u8_Reading == KEYPAD_PRESSED)
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	88 23       	and	r24, r24
    27d4:	09 f0       	breq	.+2      	; 0x27d8 <H_KeyPad_Read+0x9e>
    27d6:	9a c0       	rjmp	.+308    	; 0x290c <H_KeyPad_Read+0x1d2>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a0 e2       	ldi	r26, 0x20	; 32
    27de:	b2 e4       	ldi	r27, 0x42	; 66
    27e0:	8b 87       	std	Y+11, r24	; 0x0b
    27e2:	9c 87       	std	Y+12, r25	; 0x0c
    27e4:	ad 87       	std	Y+13, r26	; 0x0d
    27e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a e7       	ldi	r20, 0x7A	; 122
    27f6:	55 e4       	ldi	r21, 0x45	; 69
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	8f 83       	std	Y+7, r24	; 0x07
    2802:	98 87       	std	Y+8, r25	; 0x08
    2804:	a9 87       	std	Y+9, r26	; 0x09
    2806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <H_KeyPad_Read+0xf0>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <H_KeyPad_Read+0x16e>
	else if (__tmp > 65535)
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <H_KeyPad_Read+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	0f c0       	rjmp	.+30     	; 0x288a <H_KeyPad_Read+0x150>
    286c:	80 e9       	ldi	r24, 0x90	; 144
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	9c 83       	std	Y+4, r25	; 0x04
    2872:	8b 83       	std	Y+3, r24	; 0x03
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <H_KeyPad_Read+0x13e>
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <H_KeyPad_Read+0x132>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <H_KeyPad_Read+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	6f 81       	ldd	r22, Y+7	; 0x07
    2896:	78 85       	ldd	r23, Y+8	; 0x08
    2898:	89 85       	ldd	r24, Y+9	; 0x09
    289a:	9a 85       	ldd	r25, Y+10	; 0x0a
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <H_KeyPad_Read+0x17a>
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_Dio_getPinValue(Local_u8_Col) == KEYPAD_PRESSED)
    28bc:	88 89       	ldd	r24, Y+16	; 0x10
    28be:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <M_Dio_getPinValue>
    28c2:	88 23       	and	r24, r24
    28c4:	19 f5       	brne	.+70     	; 0x290c <H_KeyPad_Read+0x1d2>
				{
					while(M_Dio_getPinValue(Local_u8_Col) == KEYPAD_PRESSED);
    28c6:	88 89       	ldd	r24, Y+16	; 0x10
    28c8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <M_Dio_getPinValue>
    28cc:	88 23       	and	r24, r24
    28ce:	d9 f3       	breq	.-10     	; 0x28c6 <H_KeyPad_Read+0x18c>
					Local_u8_Value =  Local_u8_Arr[Keypad_Row1 - Local_u8_Row][Col];
    28d0:	89 89       	ldd	r24, Y+17	; 0x11
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	83 e2       	ldi	r24, 0x23	; 35
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	ac 01       	movw	r20, r24
    28dc:	42 1b       	sub	r20, r18
    28de:	53 0b       	sbc	r21, r19
    28e0:	9a 01       	movw	r18, r20
    28e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e4:	48 2f       	mov	r20, r24
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	c9 01       	movw	r24, r18
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	82 0f       	add	r24, r18
    28f4:	93 1f       	adc	r25, r19
    28f6:	9e 01       	movw	r18, r28
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	82 0f       	add	r24, r18
    28fe:	93 1f       	adc	r25, r19
    2900:	84 0f       	add	r24, r20
    2902:	95 1f       	adc	r25, r21
    2904:	fc 01       	movw	r30, r24
    2906:	73 96       	adiw	r30, 0x13	; 19
    2908:	80 81       	ld	r24, Z
    290a:	8a 8b       	std	Y+18, r24	; 0x12
	uint8_t Local_u8_Col = 0;
	uint8_t Col=0;
	for (Local_u8_Row=Keypad_Row1;Local_u8_Row>=Keypad_Row4;Local_u8_Row--)
	{
		M_Dio_SetPinValue(Local_u8_Row,LOW);
		for (Local_u8_Col=Keypad_Col1;Local_u8_Col >= Keypad_Col4;Local_u8_Col--)
    290c:	88 89       	ldd	r24, Y+16	; 0x10
    290e:	81 50       	subi	r24, 0x01	; 1
    2910:	88 8b       	std	Y+16, r24	; 0x10
    2912:	88 89       	ldd	r24, Y+16	; 0x10
    2914:	8b 32       	cpi	r24, 0x2B	; 43
    2916:	08 f0       	brcs	.+2      	; 0x291a <H_KeyPad_Read+0x1e0>
    2918:	4d cf       	rjmp	.-358    	; 0x27b4 <H_KeyPad_Read+0x7a>
					Local_u8_Value =  Local_u8_Arr[Keypad_Row1 - Local_u8_Row][Col];
				}
			}
	     	}
		}
		M_Dio_SetPinValue(Local_u8_Row,HIGH);
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	0e 94 41 08 	call	0x1082	; 0x1082 <M_Dio_SetPinValue>
	uint8_t Local_u8_Reading = KEYPAD_RELEASED;
	uint8_t Local_u8_Value   = 0;
	uint8_t Local_u8_Row = 0;
	uint8_t Local_u8_Col = 0;
	uint8_t Col=0;
	for (Local_u8_Row=Keypad_Row1;Local_u8_Row>=Keypad_Row4;Local_u8_Row--)
    2922:	89 89       	ldd	r24, Y+17	; 0x11
    2924:	81 50       	subi	r24, 0x01	; 1
    2926:	89 8b       	std	Y+17, r24	; 0x11
    2928:	89 89       	ldd	r24, Y+17	; 0x11
    292a:	80 32       	cpi	r24, 0x20	; 32
    292c:	08 f0       	brcs	.+2      	; 0x2930 <H_KeyPad_Read+0x1f6>
    292e:	3b cf       	rjmp	.-394    	; 0x27a6 <H_KeyPad_Read+0x6c>
			}
	     	}
		}
		M_Dio_SetPinValue(Local_u8_Row,HIGH);
	}
	return Local_u8_Value ;
    2930:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2932:	ac 96       	adiw	r28, 0x2c	; 44
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <main>:
#include "BitMath.h"
#include <avr\io.h>
#include "Keypad.h"
#include "Lcd.h"
int main(void)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	2f 97       	sbiw	r28, 0x0f	; 15
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
	int number1=0,number2=0;
    2958:	19 86       	std	Y+9, r1	; 0x09
    295a:	18 86       	std	Y+8, r1	; 0x08
    295c:	1f 82       	std	Y+7, r1	; 0x07
    295e:	1e 82       	std	Y+6, r1	; 0x06
	char operand=0;
    2960:	1d 82       	std	Y+5, r1	; 0x05
	H_KeyPad_Init();
    2962:	0e 94 66 13 	call	0x26cc	; 0x26cc <H_KeyPad_Init>
	H_Lcd_Init();
    2966:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <H_Lcd_Init>
	int x=0;
    296a:	1c 82       	std	Y+4, r1	; 0x04
    296c:	1b 82       	std	Y+3, r1	; 0x03
	char digit[4];
	int i=0;
    296e:	1a 82       	std	Y+2, r1	; 0x02
    2970:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		x=H_KeyPad_Read();
    2972:	0e 94 9d 13 	call	0x273a	; 0x273a <H_KeyPad_Read>
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	8b 83       	std	Y+3, r24	; 0x03
		H_Lcd_WriteString("Enter First:");
    297e:	80 e6       	ldi	r24, 0x60	; 96
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 70 12 	call	0x24e0	; 0x24e0 <H_Lcd_WriteString>
    2986:	63 c0       	rjmp	.+198    	; 0x2a4e <main+0x10a>
		while(i !=3){
			if(x==0)  {continue; }//Not pressed
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	09 f4       	brne	.+2      	; 0x2992 <main+0x4e>
    2990:	5e c0       	rjmp	.+188    	; 0x2a4e <main+0x10a>
			else if (x == 'C')
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	83 34       	cpi	r24, 0x43	; 67
    2998:	91 05       	cpc	r25, r1
    299a:	61 f4       	brne	.+24     	; 0x29b4 <main+0x70>
			{
				H_Lcd_WriteCommand(Lcd_Shift_Left); //
    299c:	87 e0       	ldi	r24, 0x07	; 7
    299e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
				H_Lcd_WriteCharacter(' '); //to be modified
    29a2:	80 e2       	ldi	r24, 0x20	; 32
    29a4:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>
				i--;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	1b c0       	rjmp	.+54     	; 0x29ea <main+0xa6>
			}
			else
			{
				H_Lcd_WriteNumber(x-48);
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	c0 97       	sbiw	r24, 0x30	; 48
    29ba:	aa 27       	eor	r26, r26
    29bc:	97 fd       	sbrc	r25, 7
    29be:	a0 95       	com	r26
    29c0:	ba 2f       	mov	r27, r26
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_Lcd_WriteNumber>
				digit[i] =x-48;
    29ca:	29 81       	ldd	r18, Y+1	; 0x01
    29cc:	3a 81       	ldd	r19, Y+2	; 0x02
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	48 2f       	mov	r20, r24
    29d2:	40 53       	subi	r20, 0x30	; 48
    29d4:	ce 01       	movw	r24, r28
    29d6:	0a 96       	adiw	r24, 0x0a	; 10
    29d8:	fc 01       	movw	r30, r24
    29da:	e2 0f       	add	r30, r18
    29dc:	f3 1f       	adc	r31, r19
    29de:	40 83       	st	Z, r20
				i++;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	9a 81       	ldd	r25, Y+2	; 0x02
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
			}

			number1=digit[0]+digit[1]*10+digit[2]*100+digit[3]*1000;
    29ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ec:	68 2f       	mov	r22, r24
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	84 e6       	ldi	r24, 0x64	; 100
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	28 9f       	mul	r18, r24
    29fc:	a0 01       	movw	r20, r0
    29fe:	29 9f       	mul	r18, r25
    2a00:	50 0d       	add	r21, r0
    2a02:	38 9f       	mul	r19, r24
    2a04:	50 0d       	add	r21, r0
    2a06:	11 24       	eor	r1, r1
    2a08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a0a:	88 2f       	mov	r24, r24
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9c 01       	movw	r18, r24
    2a10:	22 0f       	add	r18, r18
    2a12:	33 1f       	adc	r19, r19
    2a14:	c9 01       	movw	r24, r18
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	82 0f       	add	r24, r18
    2a20:	93 1f       	adc	r25, r19
    2a22:	84 0f       	add	r24, r20
    2a24:	95 1f       	adc	r25, r21
    2a26:	ab 01       	movw	r20, r22
    2a28:	48 0f       	add	r20, r24
    2a2a:	59 1f       	adc	r21, r25
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	88 ee       	ldi	r24, 0xE8	; 232
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	bc 01       	movw	r22, r24
    2a38:	26 9f       	mul	r18, r22
    2a3a:	c0 01       	movw	r24, r0
    2a3c:	27 9f       	mul	r18, r23
    2a3e:	90 0d       	add	r25, r0
    2a40:	36 9f       	mul	r19, r22
    2a42:	90 0d       	add	r25, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	84 0f       	add	r24, r20
    2a48:	95 1f       	adc	r25, r21
    2a4a:	99 87       	std	Y+9, r25	; 0x09
    2a4c:	88 87       	std	Y+8, r24	; 0x08
	int i=0;
	while(1)
	{
		x=H_KeyPad_Read();
		H_Lcd_WriteString("Enter First:");
		while(i !=3){
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	83 30       	cpi	r24, 0x03	; 3
    2a54:	91 05       	cpc	r25, r1
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <main+0x116>
    2a58:	97 cf       	rjmp	.-210    	; 0x2988 <main+0x44>
				i++;
			}

			number1=digit[0]+digit[1]*10+digit[2]*100+digit[3]*1000;
		}
		H_Lcd_GoTO(1,0);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	0e 94 3a 13 	call	0x2674	; 0x2674 <H_Lcd_GoTO>
		H_Lcd_WriteString("operation:");
    2a62:	8d e6       	ldi	r24, 0x6D	; 109
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 70 12 	call	0x24e0	; 0x24e0 <H_Lcd_WriteString>
		while (x ==0);
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	e1 f3       	breq	.-8      	; 0x2a6a <main+0x126>
		operand=x;
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	8d 83       	std	Y+5, r24	; 0x05
		H_Lcd_WriteCharacter(x);
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>

		H_Lcd_GoTO(2,0);
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	0e 94 3a 13 	call	0x2674	; 0x2674 <H_Lcd_GoTO>
		H_Lcd_WriteString("Enter Second:");
    2a84:	88 e7       	ldi	r24, 0x78	; 120
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 70 12 	call	0x24e0	; 0x24e0 <H_Lcd_WriteString>
		i=0;
    2a8c:	1a 82       	std	Y+2, r1	; 0x02
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	63 c0       	rjmp	.+198    	; 0x2b58 <main+0x214>
		while(i !=3){
			if(x==0)  {continue; }//Not pressed
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <main+0x158>
    2a9a:	5e c0       	rjmp	.+188    	; 0x2b58 <main+0x214>
			else if (x == 'C')
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	83 34       	cpi	r24, 0x43	; 67
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	61 f4       	brne	.+24     	; 0x2abe <main+0x17a>
			{
				H_Lcd_WriteCommand(Lcd_Shift_Left); //
    2aa6:	87 e0       	ldi	r24, 0x07	; 7
    2aa8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <H_Lcd_WriteCommand>
				H_Lcd_WriteCharacter(' '); //to be modified
    2aac:	80 e2       	ldi	r24, 0x20	; 32
    2aae:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_Lcd_WriteCharacter>
				i--;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	1b c0       	rjmp	.+54     	; 0x2af4 <main+0x1b0>
			}
			else
			{
				H_Lcd_WriteNumber(x-48);
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	c0 97       	sbiw	r24, 0x30	; 48
    2ac4:	aa 27       	eor	r26, r26
    2ac6:	97 fd       	sbrc	r25, 7
    2ac8:	a0 95       	com	r26
    2aca:	ba 2f       	mov	r27, r26
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_Lcd_WriteNumber>
				digit[i] =x-48;
    2ad4:	29 81       	ldd	r18, Y+1	; 0x01
    2ad6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	48 2f       	mov	r20, r24
    2adc:	40 53       	subi	r20, 0x30	; 48
    2ade:	ce 01       	movw	r24, r28
    2ae0:	0a 96       	adiw	r24, 0x0a	; 10
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e2 0f       	add	r30, r18
    2ae6:	f3 1f       	adc	r31, r19
    2ae8:	40 83       	st	Z, r20
				i++;
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
			}

			number2=digit[0]+digit[1]*10+digit[2]*100+digit[3]*1000;
    2af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af6:	68 2f       	mov	r22, r24
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	84 e6       	ldi	r24, 0x64	; 100
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	28 9f       	mul	r18, r24
    2b06:	a0 01       	movw	r20, r0
    2b08:	29 9f       	mul	r18, r25
    2b0a:	50 0d       	add	r21, r0
    2b0c:	38 9f       	mul	r19, r24
    2b0e:	50 0d       	add	r21, r0
    2b10:	11 24       	eor	r1, r1
    2b12:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9c 01       	movw	r18, r24
    2b1a:	22 0f       	add	r18, r18
    2b1c:	33 1f       	adc	r19, r19
    2b1e:	c9 01       	movw	r24, r18
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	82 0f       	add	r24, r18
    2b2a:	93 1f       	adc	r25, r19
    2b2c:	84 0f       	add	r24, r20
    2b2e:	95 1f       	adc	r25, r21
    2b30:	ab 01       	movw	r20, r22
    2b32:	48 0f       	add	r20, r24
    2b34:	59 1f       	adc	r21, r25
    2b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	88 ee       	ldi	r24, 0xE8	; 232
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	bc 01       	movw	r22, r24
    2b42:	26 9f       	mul	r18, r22
    2b44:	c0 01       	movw	r24, r0
    2b46:	27 9f       	mul	r18, r23
    2b48:	90 0d       	add	r25, r0
    2b4a:	36 9f       	mul	r19, r22
    2b4c:	90 0d       	add	r25, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	84 0f       	add	r24, r20
    2b52:	95 1f       	adc	r25, r21
    2b54:	9f 83       	std	Y+7, r25	; 0x07
    2b56:	8e 83       	std	Y+6, r24	; 0x06
		H_Lcd_WriteCharacter(x);

		H_Lcd_GoTO(2,0);
		H_Lcd_WriteString("Enter Second:");
		i=0;
		while(i !=3){
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5c:	83 30       	cpi	r24, 0x03	; 3
    2b5e:	91 05       	cpc	r25, r1
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <main+0x220>
    2b62:	97 cf       	rjmp	.-210    	; 0x2a92 <main+0x14e>
				i++;
			}

			number2=digit[0]+digit[1]*10+digit[2]*100+digit[3]*1000;
		}
		while(x != '=');
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	8d 33       	cpi	r24, 0x3D	; 61
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	d9 f7       	brne	.-10     	; 0x2b64 <main+0x220>
		H_Lcd_GoTO(2,0);
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	0e 94 3a 13 	call	0x2674	; 0x2674 <H_Lcd_GoTO>
		H_Lcd_WriteString("Result:");
    2b76:	86 e8       	ldi	r24, 0x86	; 134
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <H_Lcd_WriteString>
		switch(operand)
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	3f 87       	std	Y+15, r19	; 0x0f
    2b86:	2e 87       	std	Y+14, r18	; 0x0e
    2b88:	4e 85       	ldd	r20, Y+14	; 0x0e
    2b8a:	5f 85       	ldd	r21, Y+15	; 0x0f
    2b8c:	4b 32       	cpi	r20, 0x2B	; 43
    2b8e:	51 05       	cpc	r21, r1
    2b90:	b1 f0       	breq	.+44     	; 0x2bbe <main+0x27a>
    2b92:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b94:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b96:	6c 32       	cpi	r22, 0x2C	; 44
    2b98:	71 05       	cpc	r23, r1
    2b9a:	34 f4       	brge	.+12     	; 0x2ba8 <main+0x264>
    2b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba0:	8a 32       	cpi	r24, 0x2A	; 42
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	61 f1       	breq	.+88     	; 0x2bfe <main+0x2ba>
    2ba6:	e5 ce       	rjmp	.-566    	; 0x2972 <main+0x2e>
    2ba8:	2e 85       	ldd	r18, Y+14	; 0x0e
    2baa:	3f 85       	ldd	r19, Y+15	; 0x0f
    2bac:	2d 32       	cpi	r18, 0x2D	; 45
    2bae:	31 05       	cpc	r19, r1
    2bb0:	a9 f0       	breq	.+42     	; 0x2bdc <main+0x298>
    2bb2:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bb4:	5f 85       	ldd	r21, Y+15	; 0x0f
    2bb6:	4f 32       	cpi	r20, 0x2F	; 47
    2bb8:	51 05       	cpc	r21, r1
    2bba:	b1 f1       	breq	.+108    	; 0x2c28 <main+0x2e4>
    2bbc:	da ce       	rjmp	.-588    	; 0x2972 <main+0x2e>
		{
		case '+': H_Lcd_WriteNumber(number1+number2); break;
    2bbe:	28 85       	ldd	r18, Y+8	; 0x08
    2bc0:	39 85       	ldd	r19, Y+9	; 0x09
    2bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc6:	82 0f       	add	r24, r18
    2bc8:	93 1f       	adc	r25, r19
    2bca:	aa 27       	eor	r26, r26
    2bcc:	97 fd       	sbrc	r25, 7
    2bce:	a0 95       	com	r26
    2bd0:	ba 2f       	mov	r27, r26
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_Lcd_WriteNumber>
    2bda:	cb ce       	rjmp	.-618    	; 0x2972 <main+0x2e>
		case '-': H_Lcd_WriteNumber(number1-number2); break;
    2bdc:	28 85       	ldd	r18, Y+8	; 0x08
    2bde:	39 85       	ldd	r19, Y+9	; 0x09
    2be0:	8e 81       	ldd	r24, Y+6	; 0x06
    2be2:	9f 81       	ldd	r25, Y+7	; 0x07
    2be4:	b9 01       	movw	r22, r18
    2be6:	68 1b       	sub	r22, r24
    2be8:	79 0b       	sbc	r23, r25
    2bea:	cb 01       	movw	r24, r22
    2bec:	aa 27       	eor	r26, r26
    2bee:	97 fd       	sbrc	r25, 7
    2bf0:	a0 95       	com	r26
    2bf2:	ba 2f       	mov	r27, r26
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_Lcd_WriteNumber>
    2bfc:	ba ce       	rjmp	.-652    	; 0x2972 <main+0x2e>
		case '*': H_Lcd_WriteNumber(number1*number2); break;
    2bfe:	28 85       	ldd	r18, Y+8	; 0x08
    2c00:	39 85       	ldd	r19, Y+9	; 0x09
    2c02:	8e 81       	ldd	r24, Y+6	; 0x06
    2c04:	9f 81       	ldd	r25, Y+7	; 0x07
    2c06:	ac 01       	movw	r20, r24
    2c08:	24 9f       	mul	r18, r20
    2c0a:	c0 01       	movw	r24, r0
    2c0c:	25 9f       	mul	r18, r21
    2c0e:	90 0d       	add	r25, r0
    2c10:	34 9f       	mul	r19, r20
    2c12:	90 0d       	add	r25, r0
    2c14:	11 24       	eor	r1, r1
    2c16:	aa 27       	eor	r26, r26
    2c18:	97 fd       	sbrc	r25, 7
    2c1a:	a0 95       	com	r26
    2c1c:	ba 2f       	mov	r27, r26
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_Lcd_WriteNumber>
    2c26:	a5 ce       	rjmp	.-694    	; 0x2972 <main+0x2e>
		case '/':
			if(number2 ==0)
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <main+0x2f6>
			{
				H_Lcd_WriteString("Error");
    2c30:	8e e8       	ldi	r24, 0x8E	; 142
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	0e 94 70 12 	call	0x24e0	; 0x24e0 <H_Lcd_WriteString>
    2c38:	9c ce       	rjmp	.-712    	; 0x2972 <main+0x2e>
			}
			else
			{
				H_Lcd_WriteNumber(number1/number2); break;
    2c3a:	88 85       	ldd	r24, Y+8	; 0x08
    2c3c:	99 85       	ldd	r25, Y+9	; 0x09
    2c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c40:	3f 81       	ldd	r19, Y+7	; 0x07
    2c42:	b9 01       	movw	r22, r18
    2c44:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__divmodhi4>
    2c48:	cb 01       	movw	r24, r22
    2c4a:	aa 27       	eor	r26, r26
    2c4c:	97 fd       	sbrc	r25, 7
    2c4e:	a0 95       	com	r26
    2c50:	ba 2f       	mov	r27, r26
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_Lcd_WriteNumber>
    2c5a:	8b ce       	rjmp	.-746    	; 0x2972 <main+0x2e>

00002c5c <__mulsi3>:
    2c5c:	62 9f       	mul	r22, r18
    2c5e:	d0 01       	movw	r26, r0
    2c60:	73 9f       	mul	r23, r19
    2c62:	f0 01       	movw	r30, r0
    2c64:	82 9f       	mul	r24, r18
    2c66:	e0 0d       	add	r30, r0
    2c68:	f1 1d       	adc	r31, r1
    2c6a:	64 9f       	mul	r22, r20
    2c6c:	e0 0d       	add	r30, r0
    2c6e:	f1 1d       	adc	r31, r1
    2c70:	92 9f       	mul	r25, r18
    2c72:	f0 0d       	add	r31, r0
    2c74:	83 9f       	mul	r24, r19
    2c76:	f0 0d       	add	r31, r0
    2c78:	74 9f       	mul	r23, r20
    2c7a:	f0 0d       	add	r31, r0
    2c7c:	65 9f       	mul	r22, r21
    2c7e:	f0 0d       	add	r31, r0
    2c80:	99 27       	eor	r25, r25
    2c82:	72 9f       	mul	r23, r18
    2c84:	b0 0d       	add	r27, r0
    2c86:	e1 1d       	adc	r30, r1
    2c88:	f9 1f       	adc	r31, r25
    2c8a:	63 9f       	mul	r22, r19
    2c8c:	b0 0d       	add	r27, r0
    2c8e:	e1 1d       	adc	r30, r1
    2c90:	f9 1f       	adc	r31, r25
    2c92:	bd 01       	movw	r22, r26
    2c94:	cf 01       	movw	r24, r30
    2c96:	11 24       	eor	r1, r1
    2c98:	08 95       	ret

00002c9a <__udivmodqi4>:
    2c9a:	99 1b       	sub	r25, r25
    2c9c:	79 e0       	ldi	r23, 0x09	; 9
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <__udivmodqi4_ep>

00002ca0 <__udivmodqi4_loop>:
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	96 17       	cp	r25, r22
    2ca4:	08 f0       	brcs	.+2      	; 0x2ca8 <__udivmodqi4_ep>
    2ca6:	96 1b       	sub	r25, r22

00002ca8 <__udivmodqi4_ep>:
    2ca8:	88 1f       	adc	r24, r24
    2caa:	7a 95       	dec	r23
    2cac:	c9 f7       	brne	.-14     	; 0x2ca0 <__udivmodqi4_loop>
    2cae:	80 95       	com	r24
    2cb0:	08 95       	ret

00002cb2 <__udivmodhi4>:
    2cb2:	aa 1b       	sub	r26, r26
    2cb4:	bb 1b       	sub	r27, r27
    2cb6:	51 e1       	ldi	r21, 0x11	; 17
    2cb8:	07 c0       	rjmp	.+14     	; 0x2cc8 <__udivmodhi4_ep>

00002cba <__udivmodhi4_loop>:
    2cba:	aa 1f       	adc	r26, r26
    2cbc:	bb 1f       	adc	r27, r27
    2cbe:	a6 17       	cp	r26, r22
    2cc0:	b7 07       	cpc	r27, r23
    2cc2:	10 f0       	brcs	.+4      	; 0x2cc8 <__udivmodhi4_ep>
    2cc4:	a6 1b       	sub	r26, r22
    2cc6:	b7 0b       	sbc	r27, r23

00002cc8 <__udivmodhi4_ep>:
    2cc8:	88 1f       	adc	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	5a 95       	dec	r21
    2cce:	a9 f7       	brne	.-22     	; 0x2cba <__udivmodhi4_loop>
    2cd0:	80 95       	com	r24
    2cd2:	90 95       	com	r25
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	08 95       	ret

00002cda <__divmodhi4>:
    2cda:	97 fb       	bst	r25, 7
    2cdc:	09 2e       	mov	r0, r25
    2cde:	07 26       	eor	r0, r23
    2ce0:	0a d0       	rcall	.+20     	; 0x2cf6 <__divmodhi4_neg1>
    2ce2:	77 fd       	sbrc	r23, 7
    2ce4:	04 d0       	rcall	.+8      	; 0x2cee <__divmodhi4_neg2>
    2ce6:	e5 df       	rcall	.-54     	; 0x2cb2 <__udivmodhi4>
    2ce8:	06 d0       	rcall	.+12     	; 0x2cf6 <__divmodhi4_neg1>
    2cea:	00 20       	and	r0, r0
    2cec:	1a f4       	brpl	.+6      	; 0x2cf4 <__divmodhi4_exit>

00002cee <__divmodhi4_neg2>:
    2cee:	70 95       	com	r23
    2cf0:	61 95       	neg	r22
    2cf2:	7f 4f       	sbci	r23, 0xFF	; 255

00002cf4 <__divmodhi4_exit>:
    2cf4:	08 95       	ret

00002cf6 <__divmodhi4_neg1>:
    2cf6:	f6 f7       	brtc	.-4      	; 0x2cf4 <__divmodhi4_exit>
    2cf8:	90 95       	com	r25
    2cfa:	81 95       	neg	r24
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	08 95       	ret

00002d00 <__udivmodsi4>:
    2d00:	a1 e2       	ldi	r26, 0x21	; 33
    2d02:	1a 2e       	mov	r1, r26
    2d04:	aa 1b       	sub	r26, r26
    2d06:	bb 1b       	sub	r27, r27
    2d08:	fd 01       	movw	r30, r26
    2d0a:	0d c0       	rjmp	.+26     	; 0x2d26 <__udivmodsi4_ep>

00002d0c <__udivmodsi4_loop>:
    2d0c:	aa 1f       	adc	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	ee 1f       	adc	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	a2 17       	cp	r26, r18
    2d16:	b3 07       	cpc	r27, r19
    2d18:	e4 07       	cpc	r30, r20
    2d1a:	f5 07       	cpc	r31, r21
    2d1c:	20 f0       	brcs	.+8      	; 0x2d26 <__udivmodsi4_ep>
    2d1e:	a2 1b       	sub	r26, r18
    2d20:	b3 0b       	sbc	r27, r19
    2d22:	e4 0b       	sbc	r30, r20
    2d24:	f5 0b       	sbc	r31, r21

00002d26 <__udivmodsi4_ep>:
    2d26:	66 1f       	adc	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	1a 94       	dec	r1
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <__udivmodsi4_loop>
    2d32:	60 95       	com	r22
    2d34:	70 95       	com	r23
    2d36:	80 95       	com	r24
    2d38:	90 95       	com	r25
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	bd 01       	movw	r22, r26
    2d40:	cf 01       	movw	r24, r30
    2d42:	08 95       	ret

00002d44 <__divmodsi4>:
    2d44:	97 fb       	bst	r25, 7
    2d46:	09 2e       	mov	r0, r25
    2d48:	05 26       	eor	r0, r21
    2d4a:	0e d0       	rcall	.+28     	; 0x2d68 <__divmodsi4_neg1>
    2d4c:	57 fd       	sbrc	r21, 7
    2d4e:	04 d0       	rcall	.+8      	; 0x2d58 <__divmodsi4_neg2>
    2d50:	d7 df       	rcall	.-82     	; 0x2d00 <__udivmodsi4>
    2d52:	0a d0       	rcall	.+20     	; 0x2d68 <__divmodsi4_neg1>
    2d54:	00 1c       	adc	r0, r0
    2d56:	38 f4       	brcc	.+14     	; 0x2d66 <__divmodsi4_exit>

00002d58 <__divmodsi4_neg2>:
    2d58:	50 95       	com	r21
    2d5a:	40 95       	com	r20
    2d5c:	30 95       	com	r19
    2d5e:	21 95       	neg	r18
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	4f 4f       	sbci	r20, 0xFF	; 255
    2d64:	5f 4f       	sbci	r21, 0xFF	; 255

00002d66 <__divmodsi4_exit>:
    2d66:	08 95       	ret

00002d68 <__divmodsi4_neg1>:
    2d68:	f6 f7       	brtc	.-4      	; 0x2d66 <__divmodsi4_exit>
    2d6a:	90 95       	com	r25
    2d6c:	80 95       	com	r24
    2d6e:	70 95       	com	r23
    2d70:	61 95       	neg	r22
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	8f 4f       	sbci	r24, 0xFF	; 255
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	08 95       	ret

00002d7a <__prologue_saves__>:
    2d7a:	2f 92       	push	r2
    2d7c:	3f 92       	push	r3
    2d7e:	4f 92       	push	r4
    2d80:	5f 92       	push	r5
    2d82:	6f 92       	push	r6
    2d84:	7f 92       	push	r7
    2d86:	8f 92       	push	r8
    2d88:	9f 92       	push	r9
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	ca 1b       	sub	r28, r26
    2da4:	db 0b       	sbc	r29, r27
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
    2db0:	09 94       	ijmp

00002db2 <__epilogue_restores__>:
    2db2:	2a 88       	ldd	r2, Y+18	; 0x12
    2db4:	39 88       	ldd	r3, Y+17	; 0x11
    2db6:	48 88       	ldd	r4, Y+16	; 0x10
    2db8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dba:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dbc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dbe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dc0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dc2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dc4:	b9 84       	ldd	r11, Y+9	; 0x09
    2dc6:	c8 84       	ldd	r12, Y+8	; 0x08
    2dc8:	df 80       	ldd	r13, Y+7	; 0x07
    2dca:	ee 80       	ldd	r14, Y+6	; 0x06
    2dcc:	fd 80       	ldd	r15, Y+5	; 0x05
    2dce:	0c 81       	ldd	r16, Y+4	; 0x04
    2dd0:	1b 81       	ldd	r17, Y+3	; 0x03
    2dd2:	aa 81       	ldd	r26, Y+2	; 0x02
    2dd4:	b9 81       	ldd	r27, Y+1	; 0x01
    2dd6:	ce 0f       	add	r28, r30
    2dd8:	d1 1d       	adc	r29, r1
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	ed 01       	movw	r28, r26
    2de6:	08 95       	ret

00002de8 <_exit>:
    2de8:	f8 94       	cli

00002dea <__stop_program>:
    2dea:	ff cf       	rjmp	.-2      	; 0x2dea <__stop_program>
